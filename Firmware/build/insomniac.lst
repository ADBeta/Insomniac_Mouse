
build/insomniac.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	3bc0006f          	j	3bc <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000430          	.word	0x00000430
   c:	0000042e          	.word	0x0000042e
	...
  30:	0000042e          	.word	0x0000042e
  34:	00000000          	.word	0x00000000
  38:	0000042e          	.word	0x0000042e
  3c:	00000000          	.word	0x00000000
  40:	0000042e          	.word	0x0000042e
  44:	0000042e          	.word	0x0000042e
  48:	0000042e          	.word	0x0000042e
  4c:	0000042e          	.word	0x0000042e
  50:	000008d4          	.word	0x000008d4
  54:	0000042e          	.word	0x0000042e
  58:	0000042e          	.word	0x0000042e
  5c:	0000042e          	.word	0x0000042e
  60:	0000042e          	.word	0x0000042e
  64:	0000042e          	.word	0x0000042e
  68:	0000042e          	.word	0x0000042e
  6c:	0000042e          	.word	0x0000042e
  70:	0000042e          	.word	0x0000042e
  74:	0000042e          	.word	0x0000042e
  78:	0000042e          	.word	0x0000042e
  7c:	0000042e          	.word	0x0000042e
  80:	0000042e          	.word	0x0000042e
  84:	0000042e          	.word	0x0000042e
  88:	0000042e          	.word	0x0000042e
  8c:	0000042e          	.word	0x0000042e
  90:	0000042e          	.word	0x0000042e
  94:	0000042e          	.word	0x0000042e
  98:	0000042e          	.word	0x0000042e
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__divsi3>:
  a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
  a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
  a8:	862e                	mv	a2,a1
  aa:	85aa                	mv	a1,a0
  ac:	557d                	li	a0,-1
  ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
  b0:	4685                	li	a3,1
  b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
  b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
  ba:	0606                	slli	a2,a2,0x1
  bc:	0686                	slli	a3,a3,0x1
  be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
  c2:	4501                	li	a0,0
  c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
  c8:	8d91                	sub	a1,a1,a2
  ca:	8d55                	or	a0,a0,a3
  cc:	8285                	srli	a3,a3,0x1
  ce:	8205                	srli	a2,a2,0x1
  d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
  d2:	8082                	ret

000000d4 <__umodsi3>:
  d4:	8286                	mv	t0,ra
  d6:	3fc9                	jal	a8 <__hidden___udivsi3>
  d8:	852e                	mv	a0,a1
  da:	8282                	jr	t0
  dc:	40a00533          	neg	a0,a0
  e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
  e4:	40b005b3          	neg	a1,a1
  e8:	b7c1                	j	a8 <__hidden___udivsi3>
  ea:	40b005b3          	neg	a1,a1
  ee:	8286                	mv	t0,ra
  f0:	3f65                	jal	a8 <__hidden___udivsi3>
  f2:	40a00533          	neg	a0,a0
  f6:	8282                	jr	t0

000000f8 <__modsi3>:
  f8:	8286                	mv	t0,ra
  fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
  fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
 102:	375d                	jal	a8 <__hidden___udivsi3>
 104:	852e                	mv	a0,a1
 106:	8282                	jr	t0
 108:	40b005b3          	neg	a1,a1
 10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
 110:	40a00533          	neg	a0,a0
 114:	3f51                	jal	a8 <__hidden___udivsi3>
 116:	40b00533          	neg	a0,a1
 11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
 11e:	1131                	addi	sp,sp,-20
 120:	c426                	sw	s1,8(sp)
 122:	c806                	sw	ra,16(sp)
 124:	c622                	sw	s0,12(sp)
 126:	84ae                	mv	s1,a1
 128:	87aa                	mv	a5,a0
 12a:	85b2                	mv	a1,a2
 12c:	c699                	beqz	a3,13a <mini_pad+0x1c>
 12e:	4301                	li	t1,0
 130:	0096d763          	bge	a3,s1,13e <mini_pad+0x20>
 134:	84b6                	mv	s1,a3
 136:	4305                	li	t1,1
 138:	a019                	j	13e <mini_pad+0x20>
 13a:	4301                	li	t1,0
 13c:	86a6                	mv	a3,s1
 13e:	40968433          	sub	s0,a3,s1
 142:	00045363          	bgez	s0,148 <mini_pad+0x2a>
 146:	4401                	li	s0,0
 148:	8622                	mv	a2,s0
 14a:	853a                	mv	a0,a4
 14c:	c23e                	sw	a5,4(sp)
 14e:	c01a                	sw	t1,0(sp)
 150:	29e9                	jal	62a <memset>
 152:	4302                	lw	t1,0(sp)
 154:	4792                	lw	a5,4(sp)
 156:	872a                	mv	a4,a0
 158:	008506b3          	add	a3,a0,s0
 15c:	4601                	li	a2,0
 15e:	40c485b3          	sub	a1,s1,a2
 162:	04b04263          	bgtz	a1,1a6 <mini_pad+0x88>
 166:	0004d363          	bgez	s1,16c <mini_pad+0x4e>
 16a:	4481                	li	s1,0
 16c:	009685b3          	add	a1,a3,s1
 170:	40e58533          	sub	a0,a1,a4
 174:	02030463          	beqz	t1,19c <mini_pad+0x7e>
 178:	02b77263          	bgeu	a4,a1,19c <mini_pad+0x7e>
 17c:	02a00793          	li	a5,42
 180:	fef58fa3          	sb	a5,-1(a1)
 184:	fff58693          	addi	a3,a1,-1
 188:	00d77a63          	bgeu	a4,a3,19c <mini_pad+0x7e>
 18c:	fef58f23          	sb	a5,-2(a1)
 190:	ffe58693          	addi	a3,a1,-2
 194:	00d77463          	bgeu	a4,a3,19c <mini_pad+0x7e>
 198:	fef58ea3          	sb	a5,-3(a1)
 19c:	40c2                	lw	ra,16(sp)
 19e:	4432                	lw	s0,12(sp)
 1a0:	44a2                	lw	s1,8(sp)
 1a2:	0151                	addi	sp,sp,20
 1a4:	8082                	ret
 1a6:	00c785b3          	add	a1,a5,a2
 1aa:	0005c503          	lbu	a0,0(a1)
 1ae:	00c685b3          	add	a1,a3,a2
 1b2:	0605                	addi	a2,a2,1
 1b4:	00a58023          	sb	a0,0(a1)
 1b8:	b75d                	j	15e <mini_pad+0x40>

000001ba <mini_itoa.part.0>:
 1ba:	1101                	addi	sp,sp,-32
 1bc:	ce06                	sw	ra,28(sp)
 1be:	cc22                	sw	s0,24(sp)
 1c0:	ca26                	sw	s1,20(sp)
 1c2:	c002                	sw	zero,0(sp)
 1c4:	832a                	mv	t1,a0
 1c6:	00055763          	bgez	a0,1d4 <mini_itoa.part.0+0x1a>
 1ca:	e689                	bnez	a3,1d4 <mini_itoa.part.0+0x1a>
 1cc:	4785                	li	a5,1
 1ce:	40a00333          	neg	t1,a0
 1d2:	c03e                	sw	a5,0(sp)
 1d4:	8a05                	andi	a2,a2,1
 1d6:	06100413          	li	s0,97
 1da:	c219                	beqz	a2,1e0 <mini_itoa.part.0+0x26>
 1dc:	04100413          	li	s0,65
 1e0:	84ba                	mv	s1,a4
 1e2:	1459                	addi	s0,s0,-10
 1e4:	851a                	mv	a0,t1
 1e6:	c83a                	sw	a4,16(sp)
 1e8:	c21a                	sw	t1,4(sp)
 1ea:	c62e                	sw	a1,12(sp)
 1ec:	c41a                	sw	t1,8(sp)
 1ee:	35dd                	jal	d4 <__umodsi3>
 1f0:	47a5                	li	a5,9
 1f2:	4322                	lw	t1,8(sp)
 1f4:	45b2                	lw	a1,12(sp)
 1f6:	4742                	lw	a4,16(sp)
 1f8:	0ff57693          	zext.b	a3,a0
 1fc:	06a7e163          	bltu	a5,a0,25e <mini_itoa.part.0+0xa4>
 200:	03068693          	addi	a3,a3,48
 204:	0ff6f693          	zext.b	a3,a3
 208:	00148793          	addi	a5,s1,1
 20c:	00d48023          	sb	a3,0(s1)
 210:	851a                	mv	a0,t1
 212:	c83a                	sw	a4,16(sp)
 214:	c63e                	sw	a5,12(sp)
 216:	c42e                	sw	a1,8(sp)
 218:	3d41                	jal	a8 <__hidden___udivsi3>
 21a:	4692                	lw	a3,4(sp)
 21c:	45a2                	lw	a1,8(sp)
 21e:	47b2                	lw	a5,12(sp)
 220:	4742                	lw	a4,16(sp)
 222:	832a                	mv	t1,a0
 224:	02b6fb63          	bgeu	a3,a1,25a <mini_itoa.part.0+0xa0>
 228:	4682                	lw	a3,0(sp)
 22a:	c699                	beqz	a3,238 <mini_itoa.part.0+0x7e>
 22c:	02d00693          	li	a3,45
 230:	00d78023          	sb	a3,0(a5)
 234:	00248793          	addi	a5,s1,2
 238:	40e78533          	sub	a0,a5,a4
 23c:	01f55693          	srli	a3,a0,0x1f
 240:	96aa                	add	a3,a3,a0
 242:	00078023          	sb	zero,0(a5)
 246:	8685                	srai	a3,a3,0x1
 248:	4601                	li	a2,0
 24a:	17fd                	addi	a5,a5,-1
 24c:	00d64b63          	blt	a2,a3,262 <mini_itoa.part.0+0xa8>
 250:	40f2                	lw	ra,28(sp)
 252:	4462                	lw	s0,24(sp)
 254:	44d2                	lw	s1,20(sp)
 256:	6105                	addi	sp,sp,32
 258:	8082                	ret
 25a:	84be                	mv	s1,a5
 25c:	b761                	j	1e4 <mini_itoa.part.0+0x2a>
 25e:	96a2                	add	a3,a3,s0
 260:	b755                	j	204 <mini_itoa.part.0+0x4a>
 262:	00c705b3          	add	a1,a4,a2
 266:	0007c283          	lbu	t0,0(a5)
 26a:	0005c303          	lbu	t1,0(a1)
 26e:	0605                	addi	a2,a2,1
 270:	00558023          	sb	t0,0(a1)
 274:	00678023          	sb	t1,0(a5)
 278:	bfc9                	j	24a <mini_itoa.part.0+0x90>

0000027a <_rand_gen_32b>:
uint32_t _rand_gen_32b(void)
{
	uint32_t rand_out = 0;
	
	uint8_t bits = 32;
	while(bits--)
 27a:	20000637          	lui	a2,0x20000
 27e:	00062703          	lw	a4,0(a2) # 20000000 <_rand_lfsr>
{
 282:	02000693          	li	a3,32
	uint32_t rand_out = 0;
 286:	4501                	li	a0,0
	uint32_t msb = bit_31 ^ bit_21 ^ bit_01 ^ bit_00;
 288:	800005b7          	lui	a1,0x80000
	uint32_t bit_01 = (_rand_lfsr << 30) & 0x80000000;
 28c:	01e71313          	slli	t1,a4,0x1e
	uint32_t bit_21 = (_rand_lfsr << 10) & 0x80000000;
 290:	00a71793          	slli	a5,a4,0xa
	uint32_t msb = bit_31 ^ bit_21 ^ bit_01 ^ bit_00;
 294:	0067c7b3          	xor	a5,a5,t1
 298:	8fb9                	xor	a5,a5,a4
	uint32_t bit_00 = (_rand_lfsr << 31) & 0x80000000;
 29a:	01f71313          	slli	t1,a4,0x1f
	uint32_t msb = bit_31 ^ bit_21 ^ bit_01 ^ bit_00;
 29e:	8fed                	and	a5,a5,a1
 2a0:	0067c7b3          	xor	a5,a5,t1
	_rand_lfsr = (_rand_lfsr >> 1) | msb;
 2a4:	8305                	srli	a4,a4,0x1
	while(bits--)
 2a6:	16fd                	addi	a3,a3,-1
	{
		// Shift the current rand value for the new LSB
		rand_out = rand_out << 1;
 2a8:	0506                	slli	a0,a0,0x1
	_rand_lfsr = (_rand_lfsr >> 1) | msb;
 2aa:	8f5d                	or	a4,a4,a5
	while(bits--)
 2ac:	0ff6f693          	zext.b	a3,a3
	return msb >> 31;
 2b0:	83fd                	srli	a5,a5,0x1f
		// Append the LSB
		rand_out |= _rand_lfsr_update();
 2b2:	8d5d                	or	a0,a0,a5
	while(bits--)
 2b4:	fee1                	bnez	a3,28c <_rand_gen_32b+0x12>
 2b6:	00e62023          	sw	a4,0(a2)
	}
	
	return rand_out;
}
 2ba:	8082                	ret

000002bc <internal_handle_input.constprop.0>:
 2bc:	e00007b7          	lui	a5,0xe0000
 2c0:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 2c4:	439c                	lw	a5,0(a5)
 2c6:	8082                	ret

000002c8 <_write.constprop.0>:
 2c8:	1101                	addi	sp,sp,-32
 2ca:	cc22                	sw	s0,24(sp)
 2cc:	ce06                	sw	ra,28(sp)
 2ce:	ca26                	sw	s1,20(sp)
 2d0:	c02a                	sw	a0,0(sp)
 2d2:	c802                	sw	zero,16(sp)
 2d4:	842e                	mv	s0,a1
 2d6:	e1f9                	bnez	a1,39c <_write.constprop.0+0xd4>
 2d8:	e00007b7          	lui	a5,0xe0000
 2dc:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 2e0:	439c                	lw	a5,0(a5)
 2e2:	c789                	beqz	a5,2ec <_write.constprop.0+0x24>
 2e4:	0807f793          	andi	a5,a5,128
 2e8:	e391                	bnez	a5,2ec <_write.constprop.0+0x24>
 2ea:	3fc9                	jal	2bc <internal_handle_input.constprop.0>
 2ec:	40f2                	lw	ra,28(sp)
 2ee:	8522                	mv	a0,s0
 2f0:	4462                	lw	s0,24(sp)
 2f2:	44d2                	lw	s1,20(sp)
 2f4:	6105                	addi	sp,sp,32
 2f6:	8082                	ret
 2f8:	409406b3          	sub	a3,s0,s1
 2fc:	461d                	li	a2,7
 2fe:	8736                	mv	a4,a3
 300:	00d65363          	bge	a2,a3,306 <_write.constprop.0+0x3e>
 304:	471d                	li	a4,7
 306:	00027637          	lui	a2,0x27
 30a:	10160613          	addi	a2,a2,257 # 27101 <rv003usb.c.538ff38c+0x24ab3>
 30e:	00032583          	lw	a1,0(t1)
 312:	0805f513          	andi	a0,a1,128
 316:	ed3d                	bnez	a0,394 <_write.constprop.0+0xcc>
 318:	c981                	beqz	a1,328 <_write.constprop.0+0x60>
 31a:	c61a                	sw	t1,12(sp)
 31c:	c43a                	sw	a4,8(sp)
 31e:	c236                	sw	a3,4(sp)
 320:	3f71                	jal	2bc <internal_handle_input.constprop.0>
 322:	4332                	lw	t1,12(sp)
 324:	4722                	lw	a4,8(sp)
 326:	4692                	lw	a3,4(sp)
 328:	0036a693          	slti	a3,a3,3
 32c:	4601                	li	a2,0
 32e:	e299                	bnez	a3,334 <_write.constprop.0+0x6c>
 330:	ffd70613          	addi	a2,a4,-3
 334:	4782                	lw	a5,0(sp)
 336:	00348593          	addi	a1,s1,3
 33a:	0808                	addi	a0,sp,16
 33c:	95be                	add	a1,a1,a5
 33e:	c41a                	sw	t1,8(sp)
 340:	c23a                	sw	a4,4(sp)
 342:	2ced                	jal	63c <memcpy>
 344:	4642                	lw	a2,16(sp)
 346:	4782                	lw	a5,0(sp)
 348:	e00006b7          	lui	a3,0xe0000
 34c:	4322                	lw	t1,8(sp)
 34e:	4712                	lw	a4,4(sp)
 350:	0f868693          	addi	a3,a3,248 # e00000f8 <__global_pointer$+0xbffff8f8>
 354:	c290                	sw	a2,0(a3)
 356:	458d                	li	a1,3
 358:	00978633          	add	a2,a5,s1
 35c:	4681                	li	a3,0
 35e:	00064283          	lbu	t0,0(a2)
 362:	0685                	addi	a3,a3,1
 364:	01068793          	addi	a5,a3,16
 368:	00278533          	add	a0,a5,sp
 36c:	00550023          	sb	t0,0(a0)
 370:	00d70563          	beq	a4,a3,37a <_write.constprop.0+0xb2>
 374:	0605                	addi	a2,a2,1
 376:	feb694e3          	bne	a3,a1,35e <_write.constprop.0+0x96>
 37a:	00470693          	addi	a3,a4,4
 37e:	f806e693          	ori	a3,a3,-128
 382:	00d10823          	sb	a3,16(sp)
 386:	46c2                	lw	a3,16(sp)
 388:	94ba                	add	s1,s1,a4
 38a:	00d32023          	sw	a3,0(t1)
 38e:	f684c5e3          	blt	s1,s0,2f8 <_write.constprop.0+0x30>
 392:	bfa9                	j	2ec <_write.constprop.0+0x24>
 394:	167d                	addi	a2,a2,-1
 396:	fe25                	bnez	a2,30e <_write.constprop.0+0x46>
 398:	8426                	mv	s0,s1
 39a:	bf89                	j	2ec <_write.constprop.0+0x24>
 39c:	e0000337          	lui	t1,0xe0000
 3a0:	4481                	li	s1,0
 3a2:	0f430313          	addi	t1,t1,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 3a6:	b7e5                	j	38e <_write.constprop.0+0xc6>

000003a8 <__puts_uart>:
 3a8:	1151                	addi	sp,sp,-12
 3aa:	c222                	sw	s0,4(sp)
 3ac:	c406                	sw	ra,8(sp)
 3ae:	842e                	mv	s0,a1
 3b0:	3f21                	jal	2c8 <_write.constprop.0>
 3b2:	40a2                	lw	ra,8(sp)
 3b4:	8522                	mv	a0,s0
 3b6:	4412                	lw	s0,4(sp)
 3b8:	0131                	addi	sp,sp,12
 3ba:	8082                	ret

000003bc <handle_reset>:
 3bc:	20000197          	auipc	gp,0x20000
 3c0:	44418193          	addi	gp,gp,1092 # 20000800 <__global_pointer$>
 3c4:	00018113          	mv	sp,gp
 3c8:	08000513          	li	a0,128
 3cc:	30051073          	csrw	mstatus,a0
 3d0:	468d                	li	a3,3
 3d2:	00000517          	auipc	a0,0x0
 3d6:	c2e50513          	addi	a0,a0,-978 # 0 <InterruptVector>
 3da:	8d55                	or	a0,a0,a3
 3dc:	30551073          	csrw	mtvec,a0
 3e0:	80818513          	addi	a0,gp,-2040 # 20000008 <g_md_buffer_tail>
 3e4:	87018593          	addi	a1,gp,-1936 # 20000070 <_ebss>
 3e8:	4601                	li	a2,0
 3ea:	00b55663          	bge	a0,a1,3f6 <handle_reset+0x3a>
 3ee:	c110                	sw	a2,0(a0)
 3f0:	0511                	addi	a0,a0,4
 3f2:	feb54ee3          	blt	a0,a1,3ee <handle_reset+0x32>
 3f6:	00001517          	auipc	a0,0x1
 3fa:	a2250513          	addi	a0,a0,-1502 # e18 <_data_lma>
 3fe:	20000597          	auipc	a1,0x20000
 402:	c0258593          	addi	a1,a1,-1022 # 20000000 <_rand_lfsr>
 406:	80818613          	addi	a2,gp,-2040 # 20000008 <g_md_buffer_tail>
 40a:	00c58863          	beq	a1,a2,41a <handle_reset+0x5e>
 40e:	4114                	lw	a3,0(a0)
 410:	c194                	sw	a3,0(a1)
 412:	0511                	addi	a0,a0,4
 414:	0591                	addi	a1,a1,4
 416:	fec59ae3          	bne	a1,a2,40a <handle_reset+0x4e>
 41a:	e000f7b7          	lui	a5,0xe000f
 41e:	4715                	li	a4,5
 420:	c398                	sw	a4,0(a5)
 422:	6ba00793          	li	a5,1722
 426:	34179073          	csrw	mepc,a5
 42a:	30200073          	mret

0000042e <ADC1_IRQHandler>:
 42e:	a001                	j	42e <ADC1_IRQHandler>

00000430 <NMI_Handler>:
 430:	40021737          	lui	a4,0x40021
 434:	471c                	lw	a5,8(a4)
 436:	008006b7          	lui	a3,0x800
 43a:	8fd5                	or	a5,a5,a3
 43c:	c71c                	sw	a5,8(a4)

0000043e <strlen>:
 43e:	87aa                	mv	a5,a0
 440:	0007c703          	lbu	a4,0(a5) # e000f000 <__global_pointer$+0xc000e800>
 444:	e701                	bnez	a4,44c <strlen+0xe>
 446:	40a78533          	sub	a0,a5,a0
 44a:	8082                	ret
 44c:	0785                	addi	a5,a5,1
 44e:	bfcd                	j	440 <strlen+0x2>

00000450 <mini_vpprintf>:
 450:	fa410113          	addi	sp,sp,-92
 454:	caa2                	sw	s0,84(sp)
 456:	c8a6                	sw	s1,80(sp)
 458:	cc86                	sw	ra,88(sp)
 45a:	c02a                	sw	a0,0(sp)
 45c:	c22e                	sw	a1,4(sp)
 45e:	8432                	mv	s0,a2
 460:	84b6                	mv	s1,a3
 462:	ca02                	sw	zero,20(sp)
 464:	00044783          	lbu	a5,0(s0)
 468:	00140693          	addi	a3,s0,1
 46c:	00f10fa3          	sb	a5,31(sp)
 470:	eb81                	bnez	a5,480 <mini_vpprintf+0x30>
 472:	40e6                	lw	ra,88(sp)
 474:	4456                	lw	s0,84(sp)
 476:	4552                	lw	a0,20(sp)
 478:	44c6                	lw	s1,80(sp)
 47a:	05c10113          	addi	sp,sp,92
 47e:	8082                	ret
 480:	c636                	sw	a3,12(sp)
 482:	02500713          	li	a4,37
 486:	02e78063          	beq	a5,a4,4a6 <mini_vpprintf+0x56>
 48a:	4612                	lw	a2,4(sp)
 48c:	4782                	lw	a5,0(sp)
 48e:	4585                	li	a1,1
 490:	01f10513          	addi	a0,sp,31
 494:	9782                	jalr	a5
 496:	46b2                	lw	a3,12(sp)
 498:	c426                	sw	s1,8(sp)
 49a:	8436                	mv	s0,a3
 49c:	47d2                	lw	a5,20(sp)
 49e:	44a2                	lw	s1,8(sp)
 4a0:	97aa                	add	a5,a5,a0
 4a2:	ca3e                	sw	a5,20(sp)
 4a4:	b7c1                	j	464 <mini_vpprintf+0x14>
 4a6:	00144703          	lbu	a4,1(s0)
 4aa:	03000613          	li	a2,48
 4ae:	03000693          	li	a3,48
 4b2:	00e10fa3          	sb	a4,31(sp)
 4b6:	c632                	sw	a2,12(sp)
 4b8:	00240793          	addi	a5,s0,2
 4bc:	08d71263          	bne	a4,a3,540 <mini_vpprintf+0xf0>
 4c0:	843e                	mv	s0,a5
 4c2:	4681                	li	a3,0
 4c4:	4781                	li	a5,0
 4c6:	45a5                	li	a1,9
 4c8:	a811                	j	4dc <mini_vpprintf+0x8c>
 4ca:	00279713          	slli	a4,a5,0x2
 4ce:	0405                	addi	s0,s0,1
 4d0:	97ba                	add	a5,a5,a4
 4d2:	fff44703          	lbu	a4,-1(s0)
 4d6:	0786                	slli	a5,a5,0x1
 4d8:	97b2                	add	a5,a5,a2
 4da:	4685                	li	a3,1
 4dc:	fd070613          	addi	a2,a4,-48 # 40020fd0 <__global_pointer$+0x200207d0>
 4e0:	0ff67513          	zext.b	a0,a2
 4e4:	fea5f3e3          	bgeu	a1,a0,4ca <mini_vpprintf+0x7a>
 4e8:	c299                	beqz	a3,4ee <mini_vpprintf+0x9e>
 4ea:	00e10fa3          	sb	a4,31(sp)
 4ee:	c83e                	sw	a5,16(sp)
 4f0:	46e1                	li	a3,24
 4f2:	00f6d363          	bge	a3,a5,4f8 <mini_vpprintf+0xa8>
 4f6:	c836                	sw	a3,16(sp)
 4f8:	06c00613          	li	a2,108
 4fc:	4681                	li	a3,0
 4fe:	00c71863          	bne	a4,a2,50e <mini_vpprintf+0xbe>
 502:	00044703          	lbu	a4,0(s0)
 506:	4685                	li	a3,1
 508:	0405                	addi	s0,s0,1
 50a:	00e10fa3          	sb	a4,31(sp)
 50e:	01f14603          	lbu	a2,31(sp)
 512:	06400713          	li	a4,100
 516:	06e60563          	beq	a2,a4,580 <mini_vpprintf+0x130>
 51a:	02c76763          	bltu	a4,a2,548 <mini_vpprintf+0xf8>
 51e:	05800793          	li	a5,88
 522:	0af60063          	beq	a2,a5,5c2 <mini_vpprintf+0x172>
 526:	06300793          	li	a5,99
 52a:	0af60d63          	beq	a2,a5,5e4 <mini_vpprintf+0x194>
 52e:	d231                	beqz	a2,472 <mini_vpprintf+0x22>
 530:	4612                	lw	a2,4(sp)
 532:	4782                	lw	a5,0(sp)
 534:	4585                	li	a1,1
 536:	01f10513          	addi	a0,sp,31
 53a:	9782                	jalr	a5
 53c:	c426                	sw	s1,8(sp)
 53e:	bfb9                	j	49c <mini_vpprintf+0x4c>
 540:	02000693          	li	a3,32
 544:	c636                	sw	a3,12(sp)
 546:	bfad                	j	4c0 <mini_vpprintf+0x70>
 548:	07500713          	li	a4,117
 54c:	02e60a63          	beq	a2,a4,580 <mini_vpprintf+0x130>
 550:	07800713          	li	a4,120
 554:	06e60763          	beq	a2,a4,5c2 <mini_vpprintf+0x172>
 558:	07300713          	li	a4,115
 55c:	fce61ae3          	bne	a2,a4,530 <mini_vpprintf+0xe0>
 560:	cc3e                	sw	a5,24(sp)
 562:	00448793          	addi	a5,s1,4
 566:	4084                	lw	s1,0(s1)
 568:	c43e                	sw	a5,8(sp)
 56a:	8526                	mv	a0,s1
 56c:	3dc9                	jal	43e <strlen>
 56e:	47e2                	lw	a5,24(sp)
 570:	85aa                	mv	a1,a0
 572:	08f05663          	blez	a5,5fe <mini_vpprintf+0x1ae>
 576:	46c2                	lw	a3,16(sp)
 578:	4632                	lw	a2,12(sp)
 57a:	1838                	addi	a4,sp,56
 57c:	8526                	mv	a0,s1
 57e:	a01d                	j	5a4 <mini_vpprintf+0x154>
 580:	00448793          	addi	a5,s1,4
 584:	c43e                	sw	a5,8(sp)
 586:	c695                	beqz	a3,5b2 <mini_vpprintf+0x162>
 588:	f8b60613          	addi	a2,a2,-117
 58c:	1018                	addi	a4,sp,32
 58e:	00163693          	seqz	a3,a2
 592:	4088                	lw	a0,0(s1)
 594:	4601                	li	a2,0
 596:	45a9                	li	a1,10
 598:	310d                	jal	1ba <mini_itoa.part.0>
 59a:	46c2                	lw	a3,16(sp)
 59c:	4632                	lw	a2,12(sp)
 59e:	1838                	addi	a4,sp,56
 5a0:	85aa                	mv	a1,a0
 5a2:	1008                	addi	a0,sp,32
 5a4:	3ead                	jal	11e <mini_pad>
 5a6:	4612                	lw	a2,4(sp)
 5a8:	85aa                	mv	a1,a0
 5aa:	1828                	addi	a0,sp,56
 5ac:	4782                	lw	a5,0(sp)
 5ae:	9782                	jalr	a5
 5b0:	b5f5                	j	49c <mini_vpprintf+0x4c>
 5b2:	07500793          	li	a5,117
 5b6:	1018                	addi	a4,sp,32
 5b8:	4685                	li	a3,1
 5ba:	fcf60ce3          	beq	a2,a5,592 <mini_vpprintf+0x142>
 5be:	4681                	li	a3,0
 5c0:	bfc9                	j	592 <mini_vpprintf+0x142>
 5c2:	4088                	lw	a0,0(s1)
 5c4:	fa860613          	addi	a2,a2,-88
 5c8:	00448793          	addi	a5,s1,4
 5cc:	1018                	addi	a4,sp,32
 5ce:	4685                	li	a3,1
 5d0:	00163613          	seqz	a2,a2
 5d4:	45c1                	li	a1,16
 5d6:	c43e                	sw	a5,8(sp)
 5d8:	36cd                	jal	1ba <mini_itoa.part.0>
 5da:	46c2                	lw	a3,16(sp)
 5dc:	4632                	lw	a2,12(sp)
 5de:	85aa                	mv	a1,a0
 5e0:	1838                	addi	a4,sp,56
 5e2:	b7c1                	j	5a2 <mini_vpprintf+0x152>
 5e4:	00448793          	addi	a5,s1,4
 5e8:	c43e                	sw	a5,8(sp)
 5ea:	409c                	lw	a5,0(s1)
 5ec:	46c2                	lw	a3,16(sp)
 5ee:	4632                	lw	a2,12(sp)
 5f0:	00f10fa3          	sb	a5,31(sp)
 5f4:	1838                	addi	a4,sp,56
 5f6:	4585                	li	a1,1
 5f8:	01f10513          	addi	a0,sp,31
 5fc:	b765                	j	5a4 <mini_vpprintf+0x154>
 5fe:	4612                	lw	a2,4(sp)
 600:	8526                	mv	a0,s1
 602:	b76d                	j	5ac <mini_vpprintf+0x15c>

00000604 <printf>:
 604:	fdc10113          	addi	sp,sp,-36
 608:	ca32                	sw	a2,20(sp)
 60a:	862a                	mv	a2,a0
 60c:	c82e                	sw	a1,16(sp)
 60e:	cc36                	sw	a3,24(sp)
 610:	4581                	li	a1,0
 612:	0814                	addi	a3,sp,16
 614:	3a800513          	li	a0,936
 618:	c606                	sw	ra,12(sp)
 61a:	ce3a                	sw	a4,28(sp)
 61c:	d03e                	sw	a5,32(sp)
 61e:	c036                	sw	a3,0(sp)
 620:	3d05                	jal	450 <mini_vpprintf>
 622:	40b2                	lw	ra,12(sp)
 624:	02410113          	addi	sp,sp,36
 628:	8082                	ret

0000062a <memset>:
 62a:	962a                	add	a2,a2,a0
 62c:	87aa                	mv	a5,a0
 62e:	00c79363          	bne	a5,a2,634 <memset+0xa>
 632:	8082                	ret
 634:	00b78023          	sb	a1,0(a5)
 638:	0785                	addi	a5,a5,1
 63a:	bfd5                	j	62e <memset+0x4>

0000063c <memcpy>:
 63c:	4781                	li	a5,0
 63e:	00f61363          	bne	a2,a5,644 <memcpy+0x8>
 642:	8082                	ret
 644:	00f58733          	add	a4,a1,a5
 648:	00074683          	lbu	a3,0(a4)
 64c:	00f50733          	add	a4,a0,a5
 650:	0785                	addi	a5,a5,1
 652:	00d70023          	sb	a3,0(a4)
 656:	b7e5                	j	63e <memcpy+0x2>

00000658 <SystemInit>:
 658:	400227b7          	lui	a5,0x40022
 65c:	4705                	li	a4,1
 65e:	c398                	sw	a4,0(a5)
 660:	400217b7          	lui	a5,0x40021
 664:	01080737          	lui	a4,0x1080
 668:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
 66c:	08170713          	addi	a4,a4,129 # 1080081 <rv003usb.c.538ff38c+0x107da33>
 670:	c398                	sw	a4,0(a5)
 672:	009f0737          	lui	a4,0x9f0
 676:	c798                	sw	a4,8(a5)
 678:	40021737          	lui	a4,0x40021
 67c:	431c                	lw	a5,0(a4)
 67e:	00679693          	slli	a3,a5,0x6
 682:	fe06dde3          	bgez	a3,67c <SystemInit+0x24>
 686:	435c                	lw	a5,4(a4)
 688:	400216b7          	lui	a3,0x40021
 68c:	9bf1                	andi	a5,a5,-4
 68e:	0027e793          	ori	a5,a5,2
 692:	c35c                	sw	a5,4(a4)
 694:	4721                	li	a4,8
 696:	42dc                	lw	a5,4(a3)
 698:	8bb1                	andi	a5,a5,12
 69a:	fee79ee3          	bne	a5,a4,696 <SystemInit+0x3e>
 69e:	e00007b7          	lui	a5,0xe0000
 6a2:	0f878793          	addi	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8f8>
 6a6:	0007a023          	sw	zero,0(a5)
 6aa:	e00007b7          	lui	a5,0xe0000
 6ae:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 6b2:	08000713          	li	a4,128
 6b6:	c398                	sw	a4,0(a5)
 6b8:	8082                	ret

000006ba <main>:
md_buffer_status_t move_to_endpoint(const position_t endpoint);


/*** Main ********************************************************************/
int main(void)
{
 6ba:	1151                	addi	sp,sp,-12
 6bc:	c406                	sw	ra,8(sp)
 6be:	c222                	sw	s0,4(sp)
 6c0:	c026                	sw	s1,0(sp)
	SystemInit();
 6c2:	3f59                	jal	658 <SystemInit>
/// @brief seeds the Random LFSR to the value passed
/// @param uint32_t seed
/// @return None
void seed(const uint32_t seed_val)
{
	_rand_lfsr = seed_val;
 6c4:	123457b7          	lui	a5,0x12345
 6c8:	67878793          	addi	a5,a5,1656 # 12345678 <rv003usb.c.538ff38c+0x1234302a>
 6cc:	20000737          	lui	a4,0x20000
 6d0:	00f72023          	sw	a5,0(a4) # 20000000 <_rand_lfsr>
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
 6d4:	e000f7b7          	lui	a5,0xe000f
 6d8:	4798                	lw	a4,8(a5)
 6da:	67b1                	lui	a5,0xc
 6dc:	b8078793          	addi	a5,a5,-1152 # bb80 <rv003usb.c.538ff38c+0x9532>
 6e0:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 6e2:	e000f6b7          	lui	a3,0xe000f
 6e6:	469c                	lw	a5,8(a3)
 6e8:	8f99                	sub	a5,a5,a4
 6ea:	fe07cee3          	bltz	a5,6e6 <main+0x2c>
	Delay_Ms(1); 
	//usb_setup();

	while(1) 
	{
		printf("%d\n", (int16_t)rand());
 6ee:	6485                	lui	s1,0x1
	#endif

	// If RANDOM_STRENGTH is level 3, generate 2 32-bit outputs, then XOR them
	// together
	#if RANDOM_STRENGTH == 3
	uint32_t rand_a = _rand_gen_32b();
 6f0:	3669                	jal	27a <_rand_gen_32b>
 6f2:	842a                	mv	s0,a0
	uint32_t rand_b = _rand_gen_32b();
 6f4:	3659                	jal	27a <_rand_gen_32b>
	rand_out = rand_a ^ rand_b;
 6f6:	00a445b3          	xor	a1,s0,a0
 6fa:	05c2                	slli	a1,a1,0x10
 6fc:	85c1                	srai	a1,a1,0x10
 6fe:	d0848513          	addi	a0,s1,-760 # d08 <string0+0x4>
 702:	3709                	jal	604 <printf>
	while(1) 
 704:	b7f5                	j	6f0 <main+0x36>

00000706 <usb_pid_handle_in>:
	NVIC_EnableIRQ( EXTI7_0_IRQn );
}


void usb_pid_handle_in( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )
{
 706:	1121                	addi	sp,sp,-24
 708:	c822                	sw	s0,16(sp)
 70a:	c626                	sw	s1,12(sp)
 70c:	ca06                	sw	ra,20(sp)
	ist->current_endpoint = endp;
	struct usb_endpoint * e = &ist->eps[endp];

	int tosend = 0;
	uint8_t * sendnow;
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 70e:	00561793          	slli	a5,a2,0x5
{
 712:	843a                	mv	s0,a4
	ist->current_endpoint = endp;
 714:	c310                	sw	a2,0(a4)
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 716:	973e                	add	a4,a4,a5
 718:	5318                	lw	a4,32(a4)
{
 71a:	84b2                	mv	s1,a2
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 71c:	04b00513          	li	a0,75
 720:	e319                	bnez	a4,726 <usb_pid_handle_in+0x20>
 722:	0c300513          	li	a0,195



#if RV003USB_USE_REBOOT_FEATURE_REPORT
	if( ist->reboot_armed == 2 )
 726:	4454                	lw	a3,12(s0)
 728:	4709                	li	a4,2
 72a:	02e69e63          	bne	a3,a4,766 <usb_pid_handle_in+0x60>
 72e:	c23e                	sw	a5,4(sp)
	{
		usb_send_empty( sendtok );
 730:	c02a                	sw	a0,0(sp)
 732:	29b9                	jal	b90 <usb_send_empty>

		// Initiate boot into bootloader
		FLASH->BOOT_MODEKEYR = FLASH_KEY1;
 734:	456706b7          	lui	a3,0x45670
 738:	40022737          	lui	a4,0x40022
 73c:	12368693          	addi	a3,a3,291 # 45670123 <__global_pointer$+0x2566f923>
 740:	d714                	sw	a3,40(a4)
		FLASH->BOOT_MODEKEYR = FLASH_KEY2;
 742:	cdef96b7          	lui	a3,0xcdef9
 746:	9ab68693          	addi	a3,a3,-1621 # cdef89ab <__global_pointer$+0xadef81ab>
 74a:	d714                	sw	a3,40(a4)
		FLASH->STATR = 1<<14; // 1<<14 is zero, so, boot bootloader code. Unset for user code.
 74c:	6691                	lui	a3,0x4
 74e:	c754                	sw	a3,12(a4)
		FLASH->CTLR = CR_LOCK_Set;
		PFIC->SCTLR = 1<<31;
 750:	4792                	lw	a5,4(sp)
		FLASH->CTLR = CR_LOCK_Set;
 752:	08000693          	li	a3,128
		PFIC->SCTLR = 1<<31;
 756:	4502                	lw	a0,0(sp)
		FLASH->CTLR = CR_LOCK_Set;
 758:	cb14                	sw	a3,16(a4)
		PFIC->SCTLR = 1<<31;
 75a:	e000f737          	lui	a4,0xe000f
 75e:	800006b7          	lui	a3,0x80000
 762:	d0d72823          	sw	a3,-752(a4) # e000ed10 <__global_pointer$+0xc000e510>
	}
#endif

#if RV003USB_HANDLE_IN_REQUEST
	if( e->custom || endp )
 766:	97a2                	add	a5,a5,s0
 768:	579c                	lw	a5,40(a5)
 76a:	8fc5                	or	a5,a5,s1
 76c:	c3b9                	beqz	a5,7b2 <usb_pid_handle_in+0xac>
void usb_handle_user_in_request( struct usb_endpoint * e, uint8_t * scratchpad, int endp, uint32_t sendtok, struct rv003usb_internal * ist )
{
	static mouse_delta_t mouse_delta;
	
	// Handle the USB Mouse messages
	if(endp == 1)
 76e:	4785                	li	a5,1
 770:	04f49863          	bne	s1,a5,7c0 <usb_pid_handle_in+0xba>


md_buffer_status_t md_buffer_pop(mouse_delta_t *mdp)
{
	// Exit if there is no more data to be popped off
	if(g_md_buffer_head == g_md_buffer_tail) return MD_BUFFER_NO_DATA;
 774:	80c1a683          	lw	a3,-2036(gp) # 2000000c <g_md_buffer_head>
 778:	8081a783          	lw	a5,-2040(gp) # 20000008 <g_md_buffer_tail>
		uint8_t mouse_data[4] = {0x00, 0x00, 0x00, 0x00};
 77c:	c402                	sw	zero,8(sp)
	if(g_md_buffer_head == g_md_buffer_tail) return MD_BUFFER_NO_DATA;
 77e:	00f69e63          	bne	a3,a5,79a <usb_pid_handle_in+0x94>
			g_buffer_empty_flag = 0x01;
 782:	80918823          	sb	s1,-2032(gp) # 20000010 <g_buffer_empty_flag>
		usb_send_data(mouse_data, 4, 0, sendtok);
 786:	86aa                	mv	a3,a0
 788:	4601                	li	a2,0
 78a:	0028                	addi	a0,sp,8
 78c:	4591                	li	a1,4
 78e:	2901                	jal	b9e <usb_send_data>
	}
	else
	{
		usb_send_data( sendnow, tosend, 0, sendtok );
	}
}
 790:	40d2                	lw	ra,20(sp)
 792:	4442                	lw	s0,16(sp)
 794:	44b2                	lw	s1,12(sp)
 796:	0161                	addi	sp,sp,24
 798:	8082                	ret
	// Set the data pointer from the buffer
	*mdp = g_md_buffer[g_md_buffer_tail];
 79a:	8081a783          	lw	a5,-2040(gp) # 20000008 <g_md_buffer_tail>
 79e:	800188a3          	sb	zero,-2031(gp) # 20000011 <mouse_delta.0>

	// Update the Tail Position
	g_md_buffer_tail = (g_md_buffer_tail + 1) % MD_BUFFER_SIZE;
 7a2:	8081a783          	lw	a5,-2040(gp) # 20000008 <g_md_buffer_tail>
 7a6:	0785                	addi	a5,a5,1
 7a8:	0ff7f793          	zext.b	a5,a5
 7ac:	80f1a423          	sw	a5,-2040(gp) # 20000008 <g_md_buffer_tail>
			switch(mouse_delta)
 7b0:	bfd9                	j	786 <usb_pid_handle_in+0x80>
	int offset = (e->count)<<3;
 7b2:	4c5c                	lw	a5,28(s0)
	tosend = (int)e->max_len - offset;
 7b4:	544c                	lw	a1,44(s0)
	uint8_t * tsend = e->opaque;
 7b6:	5c18                	lw	a4,56(s0)
	int offset = (e->count)<<3;
 7b8:	078e                	slli	a5,a5,0x3
	tosend = (int)e->max_len - offset;
 7ba:	8d9d                	sub	a1,a1,a5
	if( tosend <= 0 )
 7bc:	00b04763          	bgtz	a1,7ca <usb_pid_handle_in+0xc4>
}
 7c0:	4442                	lw	s0,16(sp)
 7c2:	40d2                	lw	ra,20(sp)
 7c4:	44b2                	lw	s1,12(sp)
 7c6:	0161                	addi	sp,sp,24
		usb_send_empty( sendtok );
 7c8:	a6e1                	j	b90 <usb_send_empty>
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
 7ca:	46a1                	li	a3,8
 7cc:	00b6d363          	bge	a3,a1,7d2 <usb_pid_handle_in+0xcc>
 7d0:	45a1                	li	a1,8
}
 7d2:	4442                	lw	s0,16(sp)
 7d4:	40d2                	lw	ra,20(sp)
 7d6:	44b2                	lw	s1,12(sp)
		usb_send_data( sendnow, tosend, 0, sendtok );
 7d8:	86aa                	mv	a3,a0
 7da:	4601                	li	a2,0
 7dc:	00f70533          	add	a0,a4,a5
}
 7e0:	0161                	addi	sp,sp,24
		usb_send_data( sendnow, tosend, 0, sendtok );
 7e2:	ae75                	j	b9e <usb_send_data>

000007e4 <usb_pid_handle_data>:
}

void usb_pid_handle_data( uint32_t this_token, uint8_t * data, uint32_t which_data, uint32_t length, struct rv003usb_internal * ist )
{
	//Received data from host.
	int epno = ist->current_endpoint;
 7e4:	00072303          	lw	t1,0(a4)

	length -= 3;
	uint8_t * data_in = __builtin_assume_aligned( data, 4 );

	// Already received this packet.
	if( e->toggle_out != which_data )
 7e8:	00531793          	slli	a5,t1,0x5
 7ec:	97ba                	add	a5,a5,a4
 7ee:	53c8                	lw	a0,36(a5)
 7f0:	04c51863          	bne	a0,a2,840 <usb_pid_handle_data+0x5c>
	{
		goto just_ack;
	}

	e->toggle_out = !e->toggle_out;
 7f4:	00153513          	seqz	a0,a0
 7f8:	d3c8                	sw	a0,36(a5)


#if RV003USB_HANDLE_USER_DATA || RV003USB_USE_REBOOT_FEATURE_REPORT
	if( epno || ( !ist->setup_request && length > 3 )  )
 7fa:	00031863          	bnez	t1,80a <usb_pid_handle_data+0x26>
 7fe:	471c                	lw	a5,8(a4)
 800:	e7b1                	bnez	a5,84c <usb_pid_handle_data+0x68>
	length -= 3;
 802:	16f5                	addi	a3,a3,-3 # 7ffffffd <__global_pointer$+0x5ffff7fd>
	if( epno || ( !ist->setup_request && length > 3 )  )
 804:	478d                	li	a5,3
 806:	02d7fd63          	bgeu	a5,a3,840 <usb_pid_handle_data+0x5c>
	{
#if RV003USB_USE_REBOOT_FEATURE_REPORT
		if( ist->reboot_armed )
 80a:	475c                	lw	a5,12(a4)
 80c:	cb95                	beqz	a5,840 <usb_pid_handle_data+0x5c>
		{
			uint32_t * base = __builtin_assume_aligned( data_in, 4 );
			if( epno == 0 && base[0] == 0xaa3412fd && (base[1] & 0x00ffffff) == 0x00ddccbb )
 80e:	02031763          	bnez	t1,83c <usb_pid_handle_data+0x58>
 812:	4194                	lw	a3,0(a1)
 814:	aa3417b7          	lui	a5,0xaa341
 818:	2fd78793          	addi	a5,a5,765 # aa3412fd <__global_pointer$+0x8a340afd>
 81c:	02f69063          	bne	a3,a5,83c <usb_pid_handle_data+0x58>
 820:	41dc                	lw	a5,4(a1)
 822:	00ddd6b7          	lui	a3,0xddd
 826:	cbb68693          	addi	a3,a3,-837 # ddccbb <rv003usb.c.538ff38c+0xdda66d>
 82a:	07a2                	slli	a5,a5,0x8
 82c:	83a1                	srli	a5,a5,0x8
 82e:	00d79763          	bne	a5,a3,83c <usb_pid_handle_data+0x58>
			{
				e->count = 7;
 832:	479d                	li	a5,7
 834:	cf5c                	sw	a5,28(a4)
				ist->reboot_armed = 2;
 836:	4789                	li	a5,2

		if( reqShl == (0x0921>>1) )
		{
			// Class request (Will be writing)  This is hid_send_feature_report
#if RV003USB_USE_REBOOT_FEATURE_REPORT
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 838:	c75c                	sw	a5,12(a4)
 83a:	a019                	j	840 <usb_pid_handle_data+0x5c>
				ist->reboot_armed = 0;
 83c:	00072623          	sw	zero,12(a4)
		}
	}
just_ack:
	{
		//Got the right data.  Acknowledge.
		usb_send_data( 0, 0, 2, 0xD2 ); // Send ACK
 840:	0d200693          	li	a3,210
 844:	4609                	li	a2,2
 846:	4581                	li	a1,0
 848:	4501                	li	a0,0
 84a:	ae91                	j	b9e <usb_send_data>
		uint32_t wvi = s->lValueLSBIndexMSB;
 84c:	0045d683          	lhu	a3,4(a1)
 850:	0025d783          	lhu	a5,2(a1)
		uint32_t wLength = s->wLength;
 854:	0065d503          	lhu	a0,6(a1)
		uint32_t wvi = s->lValueLSBIndexMSB;
 858:	06c2                	slli	a3,a3,0x10
 85a:	8edd                	or	a3,a3,a5
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 85c:	0005d783          	lhu	a5,0(a1)
		e->count = 0;
 860:	00072e23          	sw	zero,28(a4)
		e->opaque = 0;
 864:	02072c23          	sw	zero,56(a4)
		e->custom = 0;
 868:	02072423          	sw	zero,40(a4)
		e->max_len = 0;
 86c:	02072623          	sw	zero,44(a4)
		ist->setup_request = 0;
 870:	00072423          	sw	zero,8(a4)
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 874:	8385                	srli	a5,a5,0x1
		if( reqShl == (0x0921>>1) )
 876:	49000613          	li	a2,1168
 87a:	00c79863          	bne	a5,a2,88a <usb_pid_handle_data+0xa6>
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 87e:	3fd00793          	li	a5,1021
 882:	faf69fe3          	bne	a3,a5,840 <usb_pid_handle_data+0x5c>
 886:	4785                	li	a5,1
 888:	bf45                	j	838 <usb_pid_handle_data+0x54>
		if( reqShl == (0x0680>>1) ) // GET_DESCRIPTOR = 6 (msb)
 88a:	34000613          	li	a2,832
 88e:	02c79d63          	bne	a5,a2,8c8 <usb_pid_handle_data+0xe4>
 892:	6785                	lui	a5,0x1
 894:	db878793          	addi	a5,a5,-584 # db8 <descriptor_list>
 898:	06078593          	addi	a1,a5,96
					e->max_len = (swLen < elLen)?swLen:elLen;
 89c:	832a                	mv	t1,a0
				if( dl->lIndexValue == wvi )
 89e:	4390                	lw	a2,0(a5)
 8a0:	02d61063          	bne	a2,a3,8c0 <usb_pid_handle_data+0xdc>
					e->opaque = (uint8_t*)dl->addr;
 8a4:	43d0                	lw	a2,4(a5)
 8a6:	df10                	sw	a2,56(a4)
					uint16_t elLen = dl->length;
 8a8:	0087c603          	lbu	a2,8(a5)
					e->max_len = (swLen < elLen)?swLen:elLen;
 8ac:	01061293          	slli	t0,a2,0x10
 8b0:	0102d293          	srli	t0,t0,0x10
 8b4:	00557363          	bgeu	a0,t0,8ba <usb_pid_handle_data+0xd6>
 8b8:	861a                	mv	a2,t1
 8ba:	0642                	slli	a2,a2,0x10
 8bc:	8241                	srli	a2,a2,0x10
 8be:	d750                	sw	a2,44(a4)
			for( i = 0; i < DESCRIPTOR_LIST_ENTRIES; i++ )
 8c0:	07b1                	addi	a5,a5,12
 8c2:	fcb79ee3          	bne	a5,a1,89e <usb_pid_handle_data+0xba>
 8c6:	bfad                	j	840 <usb_pid_handle_data+0x5c>
		else if( reqShl == (0x0500>>1) ) // SET_ADDRESS = 0x05
 8c8:	28000613          	li	a2,640
 8cc:	f6c79ae3          	bne	a5,a2,840 <usb_pid_handle_data+0x5c>
			ist->my_address = wvi;
 8d0:	c354                	sw	a3,4(a4)
 8d2:	b7bd                	j	840 <usb_pid_handle_data+0x5c>

000008d4 <EXTI7_0_IRQHandler>:

.section .text.vector_handler
.global EXTI7_0_IRQHandler
.balign 4
EXTI7_0_IRQHandler:
	addi	sp,sp,-80
 8d4:	715d                	addi	sp,sp,-80
	sw	a0, 0(sp)
 8d6:	c02a                	sw	a0,0(sp)
	sw	a5, 20(sp)
 8d8:	ca3e                	sw	a5,20(sp)
	la a5, USB_GPIO_BASE
 8da:	400117b7          	lui	a5,0x40011
 8de:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
	c.lw a0, INDR_OFFSET(a5) // MUST check SE0 immediately.
 8e2:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK
 8e4:	8961                	andi	a0,a0,24

	sw	a1, 4(sp)
 8e6:	c22e                	sw	a1,4(sp)
	sw	a2, 8(sp)
 8e8:	c432                	sw	a2,8(sp)
	sw	a3, 12(sp)
 8ea:	c636                	sw	a3,12(sp)
	sw	a4, 16(sp)
 8ec:	c83a                	sw	a4,16(sp)
	sw	s1, 28(sp)
 8ee:	ce26                	sw	s1,28(sp)

	SAVE_DEBUG_MARKER( 48 );
 8f0:	d812                	sw	tp,48(sp)
	DEBUG_TICK_SETUP
 8f2:	40013237          	lui	tp,0x40013
 8f6:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>
	c.lw a1, INDR_OFFSET(a5)
 8fa:	478c                	lw	a1,8(a5)
	c.andi a1, USB_DMASK;
 8fc:	89e1                	andi	a1,a1,24

	// Finish jump to se0
	c.beqz a0, handle_se0_keepalive
 8fe:	22050963          	beqz	a0,b30 <handle_se0_keepalive>

	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 902:	4788                	lw	a0,8(a5)
 904:	8961                	andi	a0,a0,24
 906:	02b51b63          	bne	a0,a1,93c <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 90a:	4788                	lw	a0,8(a5)
 90c:	8961                	andi	a0,a0,24
 90e:	02b51763          	bne	a0,a1,93c <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 912:	4788                	lw	a0,8(a5)
 914:	8961                	andi	a0,a0,24
 916:	02b51363          	bne	a0,a1,93c <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 91a:	4788                	lw	a0,8(a5)
 91c:	8961                	andi	a0,a0,24
 91e:	00b51f63          	bne	a0,a1,93c <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 922:	4788                	lw	a0,8(a5)
 924:	8961                	andi	a0,a0,24
 926:	00b51b63          	bne	a0,a1,93c <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 92a:	4788                	lw	a0,8(a5)
 92c:	8961                	andi	a0,a0,24
 92e:	00b51763          	bne	a0,a1,93c <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 932:	4788                	lw	a0,8(a5)
 934:	8961                	andi	a0,a0,24
 936:	00b51363          	bne	a0,a1,93c <syncout>
	c.j syncout
 93a:	a009                	j	93c <syncout>

0000093c <syncout>:
syncout:
	sw	s0, 24(sp)
 93c:	cc22                	sw	s0,24(sp)
	li a2, 0
 93e:	4601                	li	a2,0
	sw	t0, 32(sp)  // XXX NOTE: This is actually unused register - remove some day?
 940:	d016                	sw	t0,32(sp)
	sw	t1, 36(sp)
 942:	d21a                	sw	t1,36(sp)

00000944 <preamble_loop>:
	
	// This is actually somewhat late.
	// The preamble loop should try to make it earlier.
.balign 4
preamble_loop:
	DEBUG_TICK_MARK
 944:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 948:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 94a:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // SE0 here?
 94c:	18050163          	beqz	a0,ace <done_usb_message>
	c.xor a0, a1;
 950:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1.
 952:	8da9                	xor	a1,a1,a0
	j 1f; 1: // 4 cycles?
 954:	a009                	j	956 <preamble_loop+0x12>
	c.beqz a0, done_preamble
 956:	c909                	beqz	a0,968 <done_preamble>
	j 1f; 1: // 4 cycles?
 958:	a009                	j	95a <preamble_loop+0x16>
	c.lw s0, INDR_OFFSET(a5);
 95a:	4780                	lw	s0,8(a5)
	c.andi s0, USB_DMASK;
 95c:	8861                	andi	s0,s0,24
	c.xor s0, a1
 95e:	8c2d                	xor	s0,s0,a1

	// TRICKY: This helps retime the USB sync.
	// If s0 is nonzero, then it's changed (we're going too slow)
	c.bnez s0, 2f;  // This code takes 6 cycles or 8 cycles, depending.
 960:	e011                	bnez	s0,964 <preamble_loop+0x20>
	c.j 1f; 1:
 962:	a009                	j	964 <preamble_loop+0x20>
	2:
	j preamble_loop // 4 cycles
 964:	b7c5                	j	944 <preamble_loop>
 966:	0001                	nop

00000968 <done_preamble>:
.balign 4
done_preamble:
	sw  t2, 40(sp)
 968:	d41e                	sw	t2,40(sp)
	sw  ra, 52(sp)
 96a:	da06                	sw	ra,52(sp)
	// 16-byte temporary buffer at 56+sp

	// XXX TODO: Do one byte here to determine the header byte and from that set the CRC.
	c.li s1, 8
 96c:	44a1                	li	s1,8

	// This is the first bit that matters.
	c.li s0, 6 // 1 runs.
 96e:	4419                	li	s0,6

	c.nop; 
 970:	0001                	nop
 972:	0001                	nop

00000974 <packet_type_loop>:
packet_type_loop:
	// Up here to delay loop a tad, and we need to execute them anyway.
	// TODO: Maybe we could further sync bits here instead of take up time?
	// I.e. can we do what we're doing above, here, and take less time, but sync
	// up when possible.
	li a3, 0xffff // Starting CRC of 0.   Because USB doesn't respect reverse CRCing.
 974:	66c1                	lui	a3,0x10
 976:	16fd                	addi	a3,a3,-1 # ffff <rv003usb.c.538ff38c+0xd9b1>
	li a4, 0xa001
 978:	6729                	lui	a4,0xa
 97a:	0705                	addi	a4,a4,1 # a001 <rv003usb.c.538ff38c+0x79b3>
	addi  t2, sp, DATA_PTR_OFFSET //rv003usb_internal_data
 97c:	03f10393          	addi	t2,sp,63
	la  t0, 0x80
 980:	08000293          	li	t0,128
	c.nop
 984:	0001                	nop
 986:	0001                	nop

	DEBUG_TICK_MARK
 988:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 98c:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 98e:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // Not se0 complete, that can't happen here and be valid.
 990:	12050f63          	beqz	a0,ace <done_usb_message>
	c.xor a0, a1;
 994:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle
 996:	8da9                	xor	a1,a1,a0

	// No CRC for the header.
	//c.srli a0, USB_PIN_DP
	//c.addi a0, 1 // 00 -> 1, 11 -> 100
	//c.andi a0, 1 // If 1, 1 if 0, 0
        c.nop
 998:	0001                	nop
        seqz a0, a0
 99a:	00153513          	seqz	a0,a0

	// Write header into byte in reverse order, because we can.
	c.slli a2, 1
 99e:	0606                	slli	a2,a2,0x1
	c.or a2, a0
 9a0:	8e49                	or	a2,a2,a0

	// Handle bit stuffing rules.
	c.addi a0, -1 // 0->0xffffffff 1->0
 9a2:	157d                	addi	a0,a0,-1
	c.or s0, a0
 9a4:	8c49                	or	s0,s0,a0
	c.andi s0, 7
 9a6:	881d                	andi	s0,s0,7
	c.addi s0, -1
 9a8:	147d                	addi	s0,s0,-1
	c.addi s1, -1
 9aa:	14fd                	addi	s1,s1,-1
	c.bnez s1, packet_type_loop
 9ac:	f4e1                	bnez	s1,974 <packet_type_loop>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	

	// XXX Here, figure out CRC polynomial.

	li s1, (USB_BUFFER_SIZE*8) // # of bits we culd read.
 9ae:	06000493          	li	s1,96
	//
	// When we get here, packet type is loaded in A2.
	// If packet type is 0xXX01 or 0xXX11
	// the LSBs are the inverted packet type.
	// we can branch off of bit 2.
	andi a0, a2, 0x0c
 9b2:	00c67513          	andi	a0,a2,12

	// if a0 is 1 then it's DATA (full CRC) otherwise,
	// (0) for setup or PARTIAL CRC.
	// Careful:  This has to take a constant amount of time either way the branch goes.
	c.beqz a0, data_crc
 9b6:	c509                	beqz	a0,9c0 <data_crc>
	c.li a4, 0x14	
 9b8:	4751                	li	a4,20
	c.li a3, 0x1e
 9ba:	46f9                	li	a3,30
 9bc:	00000013          	.word	0x00000013

000009c0 <data_crc>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	
.balign 4
is_end_of_byte:
	HANDLE_EOB_YES
 9c0:	00c38023          	sb	a2,0(t2)
 9c4:	00138393          	.word	0x00138393

000009c8 <bit_process>:
	// end-of-byte.
.balign 4
bit_process:
	// Debug blip
//	c.lw a4, INDR_OFFSET(a5);
	DEBUG_TICK_MARK
 9c8:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 9cc:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 9ce:	8961                	andi	a0,a0,24
	c.xor a0, a1;
 9d0:	8d2d                	xor	a0,a0,a1
#define HANDLE_NEXT_BYTE(is_end_of_byte, jumptype)  \
	c.addi s1, -1; \
	andi a0, s1, 7; /* s1 could be really really big */ \
	c.jumptype a0, is_end_of_byte /* 4 cycles for this section. (Checked) (Sometimes 5)? */ 

	c.beqz a0, handle_one_bit
 9d2:	c50d                	beqz	a0,9fc <handle_one_bit>

000009d4 <handle_zero_bit>:
handle_zero_bit:
	c.xor a1, a0; // Recover a1, for next cycle
 9d4:	8da9                	xor	a1,a1,a0
	// TODO: Do we have time to do time fixup here?
	// Can we resync time here?
	// If they are different, we need to sloowwww dowwwnnn
	// There is some free time.  Could do something interesting here!!!
	// I was thinking we could put the resync code here.
	c.j 1f; 1:  //Delay 4 cycles.
 9d6:	a009                	j	9d8 <handle_zero_bit+0x4>

	c.li s0, 6      // reset runs-of-one.
 9d8:	4419                	li	s0,6
	c.beqz a1, se0_complete
 9da:	c9bd                	beqz	a1,a50 <se0_complete>

	// Handle CRC (0 bit)  (From @Domkeykong)
	slli a0,a3,31 // Put a3s LSB into a0s MSB
 9dc:	01f69513          	slli	a0,a3,0x1f
	c.srai a0,31    // Copy MSB into all other bits
 9e0:	857d                	srai	a0,a0,0x1f
	c.srli a3,1
 9e2:	8285                	srli	a3,a3,0x1
	c.and  a0, a4
 9e4:	8d79                	and	a0,a0,a4
	c.xor  a3, a0
 9e6:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 9e8:	8205                	srli	a2,a2,0x1
	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 9ea:	14fd                	addi	s1,s1,-1
 9ec:	0074f513          	andi	a0,s1,7
 9f0:	d961                	beqz	a0,9c0 <data_crc>
	c.nop
 9f2:	0001                	nop
	c.nop
 9f4:	0001                	nop
	c.nop
 9f6:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 9f8:	f8e1                	bnez	s1,9c8 <bit_process>
	c.j done_usb_message
 9fa:	a8d1                	j	ace <done_usb_message>

000009fc <handle_one_bit>:


.balign 4
handle_one_bit:
	c.addi s0, -1; // Count # of runs of 1 (subtract 1)
 9fc:	147d                	addi	s0,s0,-1
	//HANDLE_CRC (1 bit)
	andi a0, a3, 1
 9fe:	0016f513          	andi	a0,a3,1
	c.addi a0, -1
 a02:	157d                	addi	a0,a0,-1
	c.and a0, a4
 a04:	8d79                	and	a0,a0,a4
	c.srli a3, 1
 a06:	8285                	srli	a3,a3,0x1
	c.xor a3, a0
 a08:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 a0a:	8205                	srli	a2,a2,0x1
	ori a2, a2, 0x80
 a0c:	08066613          	ori	a2,a2,128
	c.beqz s0, handle_bit_stuff;
 a10:	c811                	beqz	s0,a24 <handle_bit_stuff>

	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 a12:	14fd                	addi	s1,s1,-1
 a14:	0074f513          	andi	a0,s1,7
 a18:	d545                	beqz	a0,9c0 <data_crc>
	c.nop // Need extra delay here because we need more time if it's end-of-byte.
 a1a:	0001                	nop
	c.nop
 a1c:	0001                	nop
	c.nop
 a1e:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 a20:	f4c5                	bnez	s1,9c8 <bit_process>
	c.j done_usb_message
 a22:	a075                	j	ace <done_usb_message>

00000a24 <handle_bit_stuff>:

handle_bit_stuff:
	// We want to wait a little bit, then read another byte, and make
	// sure everything is well, before heading back into the main loop
	// Debug blip
	HANDLE_NEXT_BYTE(not_is_end_of_byte_and_bit_stuffed, bnez)
 a24:	14fd                	addi	s1,s1,-1
 a26:	0074f513          	andi	a0,s1,7
 a2a:	e509                	bnez	a0,a34 <not_is_end_of_byte_and_bit_stuffed>
	HANDLE_EOB_YES
 a2c:	00c38023          	sb	a2,0(t2)
 a30:	00138393          	.word	0x00138393

00000a34 <not_is_end_of_byte_and_bit_stuffed>:

not_is_end_of_byte_and_bit_stuffed:
        DEBUG_TICK_MARK
 a34:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 a38:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 a3a:	8961                	andi	a0,a0,24
	c.beqz a0, se0_complete
 a3c:	c911                	beqz	a0,a50 <se0_complete>
	c.xor a0, a1;
 a3e:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle.
 a40:	8da9                	xor	a1,a1,a0

	// If A0 is a 0 then that's bad, we just did a bit stuff
        //   and A0 == 0 means there was no signal transition
	c.beqz a0, done_usb_message
 a42:	c551                	beqz	a0,ace <done_usb_message>

        // Reset bit stuff, delay, then continue onto the next actual bit
	c.li s0, 6;
 a44:	4419                	li	s0,6

        c.nop;
 a46:	0001                	nop
	nx6p3delay( 2, a0 )
 a48:	450d                	li	a0,3
 a4a:	157d                	addi	a0,a0,-1
 a4c:	fd7d                	bnez	a0,a4a <not_is_end_of_byte_and_bit_stuffed+0x16>

	c.bnez s1, bit_process // + 4 cycles
 a4e:	fcad                	bnez	s1,9c8 <bit_process>

00000a50 <se0_complete>:

.balign 4
se0_complete:
	// This is triggered when we finished getting a packet.
	andi a0, s1, 7; // Make sure we received an even number of bytes.
 a50:	0074f513          	andi	a0,s1,7
	c.bnez a0, done_usb_message
 a54:	ed2d                	bnez	a0,ace <done_usb_message>


	// Special: handle ACKs?
	// Now we have to decide what we're doing based on the
	// packet type.
	addi  a1, sp, DATA_PTR_OFFSET
 a56:	03f10593          	addi	a1,sp,63
 a5a:	2188                	.short	0x2188
	XW_C_LBU(a0, a1, 0);	//lbu  a0, 0(a1)
	c.addi a1, 1
 a5c:	0585                	addi	a1,a1,1
	// 1001 => 10010110 => PID IN
	// 0001 => 10000111 => PID_OUT
	// 1101 => 10110100 => SETUP    (OK)

	// a0 contains first 4 bytes.
	la ra, done_usb_message_in // Common return address for all function calls.
 a5e:	00000097          	auipc	ra,0x0
 a62:	07008093          	addi	ra,ra,112 # ace <done_usb_message>

	// For ACK don't worry about CRC.
	addi a5, a0, -0b01001011
 a66:	fb550793          	addi	a5,a0,-75

	RESTORE_DEBUG_MARKER(48) // restore x4 for whatever in C land.
 a6a:	5242                	lw	tp,48(sp)

	la a4, rv003usb_internal_data
 a6c:	1ffff717          	auipc	a4,0x1ffff
 a70:	5a870713          	addi	a4,a4,1448 # 20000014 <rv003usb_internal_data>

	// ACK doesn't need good CRC.
	c.beqz a5, usb_pid_handle_ack
 a74:	c7c9                	beqz	a5,afe <usb_pid_handle_ack>

	// Next, check for tokens.
	c.bnez a3, crc_for_tokens_would_be_bad_maybe_data
 a76:	ea85                	bnez	a3,aa6 <crc_for_tokens_would_be_bad_maybe_data>

00000a78 <may_be_a_token>:
 a78:	2192                	.short	0x2192
may_be_a_token:
	// Our CRC is 0, so we might be a token.

	// Do token-y things.
	XW_C_LHU( a2, a1, 0 )
	andi a0, a2, 0x7f // addr
 a7a:	07f67513          	andi	a0,a2,127
	c.srli a2, 7
 a7e:	821d                	srli	a2,a2,0x7
	c.andi a2, 0xf    // endp
 a80:	8a3d                	andi	a2,a2,15
	li s0, ENDPOINTS
 a82:	4409                	li	s0,2
	bgeu a2, s0, done_usb_message // Make sure < ENDPOINTS
 a84:	04867563          	bgeu	a2,s0,ace <done_usb_message>
	c.beqz a0,  yes_check_tokens
 a88:	c501                	beqz	a0,a90 <yes_check_tokens>
 a8a:	2340                	.short	0x2340
	// Otherwise, we might have our assigned address.
	XW_C_LBU(s0, a4, MY_ADDRESS_OFFSET_BYTES);	//	lbu s0, MY_ADDRESS_OFFSET_BYTES(a4)
	bne s0, a0, done_usb_message // addr != 0 && addr != ours.
 a8c:	04a41163          	bne	s0,a0,ace <done_usb_message>

00000a90 <yes_check_tokens>:
yes_check_tokens:
	addi a5, a5, (0b01001011-0b10000111)
 a90:	fc478793          	addi	a5,a5,-60
	c.beqz a5, usb_pid_handle_out
 a94:	cfc1                	beqz	a5,b2c <usb_pid_handle_out>
	c.addi a5, (0b10000111-0b10010110)
 a96:	17c5                	addi	a5,a5,-15
	c.beqz a5, usb_pid_handle_in
 a98:	00079463          	bnez	a5,aa0 <yes_check_tokens+0x10>
 a9c:	c6bff06f          	j	706 <usb_pid_handle_in>
	c.addi a5, (0b10010110-0b10110100)
 aa0:	1789                	addi	a5,a5,-30
	c.beqz a5, usb_pid_handle_setup
 aa2:	cbb5                	beqz	a5,b16 <usb_pid_handle_setup>

	c.j done_usb_message_in
 aa4:	a02d                	j	ace <done_usb_message>

00000aa6 <crc_for_tokens_would_be_bad_maybe_data>:

	// CRC is nonzero. (Good for Data packets)
crc_for_tokens_would_be_bad_maybe_data:
	li s0, 0xb001  // UGH: You can't use the CRC16 in reverse :(
 aa6:	642d                	lui	s0,0xb
 aa8:	0405                	addi	s0,s0,1 # b001 <rv003usb.c.538ff38c+0x89b3>
	c.sub a3, s0
 aaa:	8e81                	sub	a3,a3,s0
	c.bnez a3, done_usb_message_in
 aac:	e28d                	bnez	a3,ace <done_usb_message>
	// Good CRC!!
	sub a3, t2, a1 //a3 = # of bytes read..
 aae:	40b386b3          	sub	a3,t2,a1
	c.addi a3, 1
 ab2:	0685                	addi	a3,a3,1
	addi a5, a5, (0b01001011-0b11000011)
 ab4:	f8878793          	addi	a5,a5,-120
	c.li a2, 0
 ab8:	4601                	li	a2,0
	c.beqz a5, usb_pid_handle_data
 aba:	00079463          	bnez	a5,ac2 <crc_for_tokens_would_be_bad_maybe_data+0x1c>
 abe:	d27ff06f          	j	7e4 <usb_pid_handle_data>
	c.addi a5, (0b11000011-0b11010010)
 ac2:	17c5                	addi	a5,a5,-15
	c.li a2, 1
 ac4:	4605                	li	a2,1
	c.beqz a5, usb_pid_handle_data
 ac6:	00079463          	bnez	a5,ace <done_usb_message>
 aca:	d1bff06f          	j	7e4 <usb_pid_handle_data>

00000ace <done_usb_message>:

done_usb_message:
done_usb_message_in:
	lw	s0, 24(sp)
 ace:	4462                	lw	s0,24(sp)
	lw	s1, 28(sp)
 ad0:	44f2                	lw	s1,28(sp)
	lw	t0, 32(sp)
 ad2:	5282                	lw	t0,32(sp)
	lw	t1, 36(sp)
 ad4:	5312                	lw	t1,36(sp)
	lw	t2, 40(sp)
 ad6:	53a2                	lw	t2,40(sp)
	lw  ra, 52(sp)
 ad8:	50d2                	lw	ra,52(sp)

00000ada <ret_from_se0>:

ret_from_se0:
	lw	s1, 28(sp)
 ada:	44f2                	lw	s1,28(sp)
	RESTORE_DEBUG_MARKER(48)
 adc:	5242                	lw	tp,48(sp)
	lw	a2, 8(sp)
 ade:	4622                	lw	a2,8(sp)
	lw	a3, 12(sp)
 ae0:	46b2                	lw	a3,12(sp)
	lw	a4, 16(sp)
 ae2:	4742                	lw	a4,16(sp)
	lw	a1, 4(sp)
 ae4:	4592                	lw	a1,4(sp)

00000ae6 <interrupt_complete>:

interrupt_complete:
	// Acknowledge interrupt.
	// EXTI->INTFR = 1<<4
	c.j 1f; 1: // Extra little bit of delay to make sure we don't accidentally false fire.
 ae6:	a009                	j	ae8 <interrupt_complete+0x2>

	la a5, EXTI_BASE + 20
 ae8:	400107b7          	lui	a5,0x40010
 aec:	41478793          	addi	a5,a5,1044 # 40010414 <__global_pointer$+0x2000fc14>
	li a0, (1<<USB_PIN_DM)
 af0:	4521                	li	a0,8
	sw a0, 0(a5)
 af2:	c388                	sw	a0,0(a5)

	// Restore stack.
	lw	a0, 0(sp)
 af4:	4502                	lw	a0,0(sp)
	lw	a5, 20(sp)
 af6:	47d2                	lw	a5,20(sp)
	addi	sp,sp,80
 af8:	6161                	addi	sp,sp,80
	mret
 afa:	30200073          	mret

00000afe <usb_pid_handle_ack>:
	return;
}
*/

usb_pid_handle_ack:
	c.lw a2, 0(a4) //ist->current_endpoint -> endp;
 afe:	4310                	lw	a2,0(a4)
	c.slli a2, 5
 b00:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 b02:	963a                	add	a2,a2,a4
	c.addi a2, ENDP_OFFSET // usb_endpoint eps[ENDPOINTS];
 b04:	0671                	addi	a2,a2,28

	c.lw a0, (EP_TOGGLE_IN_OFFSET)(a2) // toggle_in=!toggle_in
 b06:	4248                	lw	a0,4(a2)
	c.li a1, 1
 b08:	4585                	li	a1,1
	c.xor a0, a1
 b0a:	8d2d                	xor	a0,a0,a1
	c.sw a0, (EP_TOGGLE_IN_OFFSET)(a2)
 b0c:	c248                	sw	a0,4(a2)

	c.lw a0, (EP_COUNT_OFFSET)(a2) // count_in
 b0e:	4208                	lw	a0,0(a2)
	c.addi a0, 1
 b10:	0505                	addi	a0,a0,1
	c.sw a0, (EP_COUNT_OFFSET)(a2)
 b12:	c208                	sw	a0,0(a2)

	c.j done_usb_message_in
 b14:	bf6d                	j	ace <done_usb_message>

00000b16 <usb_pid_handle_setup>:
	e->count = 0;
	e->toggle_in = 1;
	ist->setup_request = 1;
}*/
usb_pid_handle_setup:
	c.sw a2, 0(a4) // ist->current_endpoint = endp
 b16:	c310                	sw	a2,0(a4)
	c.li a1, 1
 b18:	4585                	li	a1,1
	c.sw a1, SETUP_REQUEST_OFFSET(a4) //ist->setup_request = 1;
 b1a:	c70c                	sw	a1,8(a4)
	c.slli a2, 3+2
 b1c:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 b1e:	963a                	add	a2,a2,a4
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_IN_OFFSET)(a2) //e->toggle_in = 1;
 b20:	d20c                	sw	a1,32(a2)
	c.li a1, 0
 b22:	4581                	li	a1,0
	c.sw a1, (ENDP_OFFSET+EP_COUNT_OFFSET)(a2)  //e->count = 0;
 b24:	ce4c                	sw	a1,28(a2)
	c.sw a1, (ENDP_OFFSET+EP_OPAQUE_OFFSET)(a2)  //e->opaque = 0;
 b26:	de0c                	sw	a1,56(a2)
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_OUT_OFFSET)(a2) //e->toggle_out = 0;
 b28:	d24c                	sw	a1,36(a2)
	c.j done_usb_message_in	
 b2a:	b755                	j	ace <done_usb_message>

00000b2c <usb_pid_handle_out>:
 b2c:	a310                	.short	0xa310
//This will correctly swap back the endpoint.
usb_pid_handle_out:
	//void usb_pid_handle_out( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )	
	//sb a2, 0(a4) //ist->current_endpoint = endp;
	XW_C_SB( a2, a4, 0 ); // current_endpoint = endp
	c.j done_usb_message_in
 b2e:	b745                	j	ace <done_usb_message>

00000b30 <handle_se0_keepalive>:

handle_se0_keepalive:
	// In here, we want to do smart stuff with the
	// 1ms tick.

	la  a0, SYSTICK_CNT
 b30:	e000f537          	lui	a0,0xe000f
 b34:	0521                	addi	a0,a0,8 # e000f008 <__global_pointer$+0xc000e808>
	la a4, rv003usb_internal_data
 b36:	1ffff717          	auipc	a4,0x1ffff
 b3a:	4de70713          	addi	a4,a4,1246 # 20000014 <rv003usb_internal_data>
	c.lw a1, LAST_SE0_OFFSET(a4) //last cycle count   last_se0_cyccount
 b3e:	4b0c                	lw	a1,16(a4)
	c.lw a2, 0(a0) //this cycle count
 b40:	4110                	lw	a2,0(a0)
	c.sw a2, LAST_SE0_OFFSET(a4) //store it back to last_se0_cyccount
 b42:	cb10                	sw	a2,16(a4)
	c.sub a2, a1
 b44:	8e0d                	sub	a2,a2,a1
	c.sw a2, DELTA_SE0_OFFSET(a4) //record delta_se0_cyccount
 b46:	cb50                	sw	a2,20(a4)

	li a1, 48000
 b48:	65b1                	lui	a1,0xc
 b4a:	b8058593          	addi	a1,a1,-1152 # bb80 <rv003usb.c.538ff38c+0x9532>
	c.sub a2, a1
 b4e:	8e0d                	sub	a2,a2,a1
	// This is our deviance from 48MHz.

	// Make sure we aren't in left field.
	li a5, 4000
 b50:	6785                	lui	a5,0x1
 b52:	fa078793          	addi	a5,a5,-96 # fa0 <_data_lma+0x188>
	bge a2, a5, ret_from_se0
 b56:	f8f652e3          	bge	a2,a5,ada <ret_from_se0>
	li a5, -4000
 b5a:	77fd                	lui	a5,0xfffff
 b5c:	06078793          	addi	a5,a5,96 # fffff060 <__global_pointer$+0xdfffe860>
	blt a2, a5, ret_from_se0
 b60:	f6f64de3          	blt	a2,a5,ada <ret_from_se0>

	c.lw a1, SE0_WINDUP_OFFSET(a4) // load windup se0_windup
 b64:	4f0c                	lw	a1,24(a4)
	c.add a1, a2
 b66:	95b2                	add	a1,a1,a2
	c.sw a1, SE0_WINDUP_OFFSET(a4) // save windup
 b68:	cf0c                	sw	a1,24(a4)

	// No further adjustments
	beqz a1, ret_from_se0
 b6a:	d9a5                	beqz	a1,ada <ret_from_se0>

	// 0x40021000 = RCC.CTLR
	la a4, 0x40021000
 b6c:	40021737          	lui	a4,0x40021
	lw a0, 0(a4)
 b70:	4308                	lw	a0,0(a4)
	srli a2, a0, 3 // Extract HSI Trim.
 b72:	00355613          	srli	a2,a0,0x3
	andi a2, a2, 0b11111
 b76:	8a7d                	andi	a2,a2,31
	li a5, 0xffffff07  
 b78:	f0700793          	li	a5,-249
	and a0, a0, a5	// Mask off non-HSI
 b7c:	8d7d                	and	a0,a0,a5

	// Decimate windup - use as HSIrim.
	neg a1, a1
 b7e:	40b005b3          	neg	a1,a1
	srai a2, a1, 9
 b82:	4095d613          	srai	a2,a1,0x9
	addi a2, a2, 16  // add HSI offset.
 b86:	0641                	addi	a2,a2,16

	// Put trim in place in register.
	slli a2, a2, 3
 b88:	060e                	slli	a2,a2,0x3
	or a0, a0, a2
 b8a:	8d51                	or	a0,a0,a2
	sw a0, 0(a4)
 b8c:	c308                	sw	a0,0(a4)

	j ret_from_se0
 b8e:	b7b1                	j	ada <ret_from_se0>

00000b90 <usb_send_empty>:


.balign 4
//void usb_send_empty( uint32_t token );
usb_send_empty:
	c.mv a3, a0
 b90:	86aa                	mv	a3,a0
	la a0, always0
 b92:	00000517          	auipc	a0,0x0
 b96:	13a50513          	addi	a0,a0,314 # ccc <always0>
	li a1, 2
 b9a:	4589                	li	a1,2
	c.mv a2, a1
 b9c:	862e                	mv	a2,a1

00000b9e <usb_send_data>:
//void usb_send_data( uint8_t * data, uint32_t length, uint32_t poly_function, uint32_t token );
usb_send_data:
	addi	sp,sp,-16
 b9e:	1141                	addi	sp,sp,-16
	sw	s0, 0(sp)
 ba0:	c022                	sw	s0,0(sp)
	sw	s1, 4(sp)
 ba2:	c226                	sw	s1,4(sp)

	la a5, USB_GPIO_BASE
 ba4:	400117b7          	lui	a5,0x40011
 ba8:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>

	// ASAP: Turn the bus around and send our preamble + token.
	c.lw a4, CFGLR_OFFSET(a5)
 bac:	4398                	lw	a4,0(a5)

	li s1, ~((0b1111<<(USB_PIN_DP*4)) | (0b1111<<(USB_PIN_DM*4)))
 bae:	fff014b7          	lui	s1,0xfff01
 bb2:	14fd                	addi	s1,s1,-1 # fff00fff <__global_pointer$+0xdff007ff>
	and a4, s1, a4
 bb4:	8f65                	and	a4,a4,s1

	// Convert D+/D- into 2MHz outputs
	li s1, ((0b0010<<(USB_PIN_DP*4)) | (0b0010<<(USB_PIN_DM*4)))
 bb6:	000224b7          	lui	s1,0x22
	or a4, s1, a4
 bba:	8f45                	or	a4,a4,s1

	li s1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16))
 bbc:	000804b7          	lui	s1,0x80
 bc0:	04c1                	addi	s1,s1,16 # 80010 <rv003usb.c.538ff38c+0x7d9c2>
	c.sw s1, BSHR_OFFSET(a5)
 bc2:	cb84                	sw	s1,16(a5)

	//00: Universal push-pull output mode
	c.sw a4, CFGLR_OFFSET(a5)
 bc4:	c398                	sw	a4,0(a5)

	li t1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16)) | (1<<USB_PIN_DM) | (1<<(USB_PIN_DP+16));
 bc6:	00180337          	lui	t1,0x180
 bca:	0361                	addi	t1,t1,24 # 180018 <rv003usb.c.538ff38c+0x17d9ca>

	SAVE_DEBUG_MARKER( 8 )
 bcc:	c412                	sw	tp,8(sp)

	// Save off our preamble and token.
	c.slli a3, 7     //Put token further up so it gets sent later.
 bce:	069e                	slli	a3,a3,0x7
	ori s0, a3, 0x40  
 bd0:	0406e413          	ori	s0,a3,64

	li t0, 0x0000
 bd4:	4281                	li	t0,0
	c.bnez a2, done_poly_check
 bd6:	e609                	bnez	a2,be0 <done_poly_check>
	li t0, 0xa001
 bd8:	62a9                	lui	t0,0xa
 bda:	0285                	addi	t0,t0,1 # a001 <rv003usb.c.538ff38c+0x79b3>
	li a2, 0xffff
 bdc:	6641                	lui	a2,0x10
 bde:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.538ff38c+0xd9b1>

00000be0 <done_poly_check>:
done_poly_check:

	c.slli a1, 3 // bump up one extra to be # of bits
 be0:	058e                	slli	a1,a1,0x3
	mv t2, a1
 be2:	83ae                	mv	t2,a1

	// t0 is our polynomial
	// a2 is our running CRC.
	// a3 is our token.
	DEBUG_TICK_SETUP
 be4:	40013237          	lui	tp,0x40013
 be8:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>

	c.li a4, 6 // reset bit stuffing.
 bec:	4719                	li	a4,6
	c.li a1, 15 // 15 bits.
 bee:	45bd                	li	a1,15

	//c.nop; c.nop; c.nop;
	c.j pre_and_tok_send_inner_loop
 bf0:	a011                	j	bf4 <pre_and_tok_send_inner_loop>
 bf2:	0001                	nop

00000bf4 <pre_and_tok_send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 bf4:	86a2                	mv	a3,s0
	c.srli s0, 1 // Shift down into the next bit.
 bf6:	8005                	srli	s0,s0,0x1
	c.andi a3, 1
 bf8:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.

	c.addi a4, -1
 bfa:	177d                	addi	a4,a4,-1 # 40020fff <__global_pointer$+0x200207ff>
	c.bnez a3, pre_and_tok_send_one_bit
 bfc:	e681                	bnez	a3,c04 <pre_and_tok_send_one_bit>
//Send 0 bit. (Flip)
	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 bfe:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 c02:	4719                	li	a4,6

00000c04 <pre_and_tok_send_one_bit>:
	// DO NOT flip.  Allow a4 to increment.
// Deliberately unaligned for timing purposes.
.balign 4
pre_and_tok_send_one_bit:
	sw s1, BSHR_OFFSET(a5)
 c04:	cb84                	sw	s1,16(a5)
	//Bit stuffing doesn't happen.
	c.addi a1, -1
 c06:	15fd                	addi	a1,a1,-1
	c.beqz a1, pre_and_tok_done_sending_data
 c08:	c591                	beqz	a1,c14 <pre_and_tok_done_sending_data>
	nx6p3delay( 2, a3 );	c.nop;             // Free time!
 c0a:	468d                	li	a3,3
 c0c:	16fd                	addi	a3,a3,-1
 c0e:	fefd                	bnez	a3,c0c <pre_and_tok_send_one_bit+0x8>
 c10:	0001                	nop
	c.j pre_and_tok_send_inner_loop
 c12:	b7cd                	j	bf4 <pre_and_tok_send_inner_loop>

00000c14 <pre_and_tok_done_sending_data>:
////////////////////////////////////////////////////////////////////////////

	// We have very little time here.  Just enough to do this.

	//Restore size.
	mv a1, t2//lw  a1, 12(sp)
 c14:	859e                	mv	a1,t2
	c.beqz a1, no_really_done_sending_data  //No actual payload?  Bail!
 c16:	c5ad                	beqz	a1,c80 <no_really_done_sending_data>
	c.addi a1, -1
 c18:	15fd                	addi	a1,a1,-1
//	beqz t2, no_really_done_sending_data 

	bnez t0, done_poly_check2
 c1a:	00029463          	bnez	t0,c22 <done_poly_check2>
	li a2, 0xffff
 c1e:	6641                	lui	a2,0x10
 c20:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.538ff38c+0xd9b1>

00000c22 <done_poly_check2>:
 c22:	0001                	nop

00000c24 <load_next_byte>:
 c24:	2100                	.short	0x2100
	// CH32v003 has the XW extension.
	// this replaces: lb s0, 0(a0)
	XW_C_LBU(s0, a0, 0);
	//lb s0, 0(a0)
	//	.long 0x00150513 // addi a0, a0, 1  (For alignment's sake)
	c.addi a0, 1
 c26:	0505                	addi	a0,a0,1

00000c28 <send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 c28:	86a2                	mv	a3,s0
	c.andi a3, 1
 c2a:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.
	c.beqz a3, send_zero_bit
 c2c:	ce81                	beqz	a3,c44 <send_zero_bit>
	c.srli s0, 1 // Shift down into the next bit.
 c2e:	8005                	srli	s0,s0,0x1
//send_one_bit:
	//HANDLE_CRC (1 bit)
	andi a3, a2, 1
 c30:	00167693          	andi	a3,a2,1
	c.addi a3, -1
 c34:	16fd                	addi	a3,a3,-1
	and a3, a3, t0
 c36:	0056f6b3          	and	a3,a3,t0
	c.srli a2, 1
 c3a:	8205                	srli	a2,a2,0x1
	c.xor a2, a3
 c3c:	8e35                	xor	a2,a2,a3

	c.addi a4, -1
 c3e:	177d                	addi	a4,a4,-1
	c.beqz a4, insert_stuffed_bit
 c40:	cf25                	beqz	a4,cb8 <insert_stuffed_bit>
	c.j cont_after_jump
 c42:	a829                	j	c5c <cont_after_jump>

00000c44 <send_zero_bit>:
//Send 0 bit. (Flip)
.balign 4
send_zero_bit:
	c.srli s0, 1 // Shift down into the next bit.
 c44:	8005                	srli	s0,s0,0x1
	// a3 is temp
	// t0 is polynomial.

	// XXX WARNING: this was by https://github.com/cnlohr/rv003usb/issues/7 
	// TODO Check me!
	slli a3,a2,31 // Put a3s LSB into a0s MSB
 c46:	01f61693          	slli	a3,a2,0x1f
	c.srai a3,31    // Copy MSB into all other bits
 c4a:	86fd                	srai	a3,a3,0x1f

	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 c4c:	0064c4b3          	xor	s1,s1,t1
	sw s1, BSHR_OFFSET(a5)
 c50:	cb84                	sw	s1,16(a5)

	c.li a4, 6 // reset bit stuffing.
 c52:	4719                	li	a4,6

	// XXX XXX CRC down here to make bit stuffing timings line up.
	c.srli a2,1
 c54:	8205                	srli	a2,a2,0x1
	and a3,a3,t0
 c56:	0056f6b3          	and	a3,a3,t0
	c.xor  a2,a3 
 c5a:	8e35                	xor	a2,a2,a3

00000c5c <cont_after_jump>:

.balign 4
cont_after_jump:
send_end_bit_complete:
	c.beqz a1, done_sending_data
 c5c:	c981                	beqz	a1,c6c <done_sending_data>
	andi a3, a1, 7
 c5e:	0075f693          	andi	a3,a1,7
	c.addi a1, -1
 c62:	15fd                	addi	a1,a1,-1
	c.beqz a3, load_next_byte
 c64:	d2e1                	beqz	a3,c24 <load_next_byte>
	// Wait an extra few cycles.
	c.j 1f; 1:
 c66:	a009                	j	c68 <cont_after_jump+0xc>
	c.j send_inner_loop
 c68:	b7c1                	j	c28 <send_inner_loop>
 c6a:	0001                	nop

00000c6c <done_sending_data>:

.balign 4
done_sending_data:
	// BUT WAIT!! MAYBE WE NEED TO CRC!
	beqz t0, no_really_done_sending_data
 c6c:	00028a63          	beqz	t0,c80 <no_really_done_sending_data>
	srli t0, t0, 8 // reset poly - we don't want it anymore.
 c70:	0082d293          	srli	t0,t0,0x8
	li a1, 7 // Load 8 more bits out
 c74:	459d                	li	a1,7
	beqz t0, send_inner_loop  //Second CRC byte
 c76:	fa0289e3          	beqz	t0,c28 <send_inner_loop>
	// First CRC byte
	not s0, a2 // get read to send out the CRC.
 c7a:	fff64413          	not	s0,a2
	c.j send_inner_loop
 c7e:	b76d                	j	c28 <send_inner_loop>

00000c80 <no_really_done_sending_data>:
.balign 4
no_really_done_sending_data:

//	c.bnez a2, poly_function  TODO: Uncomment me!

	nx6p3delay( 2, a3 );
 c80:	468d                	li	a3,3
 c82:	16fd                	addi	a3,a3,-1
 c84:	fefd                	bnez	a3,c82 <no_really_done_sending_data+0x2>

	// Need to perform an SE0.
	li s1, (1<<(USB_PIN_DM+16)) | (1<<(USB_PIN_DP+16))
 c86:	001804b7          	lui	s1,0x180
	c.sw s1, BSHR_OFFSET(a5)
 c8a:	cb84                	sw	s1,16(a5)

	nx6p3delay( 7, a3 );
 c8c:	46a1                	li	a3,8
 c8e:	16fd                	addi	a3,a3,-1
 c90:	fefd                	bnez	a3,c8e <no_really_done_sending_data+0xe>

	li s1, (1<<(USB_PIN_DM)) | (1<<(USB_PIN_DP+16))
 c92:	001004b7          	lui	s1,0x100
 c96:	04a1                	addi	s1,s1,8 # 100008 <rv003usb.c.538ff38c+0xfd9ba>
	c.sw s1, BSHR_OFFSET(a5)
 c98:	cb84                	sw	s1,16(a5)

	lw s1, CFGLR_OFFSET(a5)
 c9a:	4384                	lw	s1,0(a5)
	// Convert D+/D- into inputs.
	li a3, ~((0b11<<(USB_PIN_DP*4)) | (0b11<<(USB_PIN_DM*4)))
 c9c:	fffcd6b7          	lui	a3,0xfffcd
 ca0:	16fd                	addi	a3,a3,-1 # fffccfff <__global_pointer$+0xdffcc7ff>
	and s1, a3, s1
 ca2:	8cf5                	and	s1,s1,a3
	// 01: Floating input mode.
	li a3, ((0b01<<(USB_PIN_DP*4+2)) | (0b01<<(USB_PIN_DM*4+2)))
 ca4:	000446b7          	lui	a3,0x44
	or s1, a3, s1
 ca8:	8cd5                	or	s1,s1,a3
	sw s1, CFGLR_OFFSET(a5)
 caa:	c384                	sw	s1,0(a5)

	lw	s0, 0(sp)
 cac:	4402                	lw	s0,0(sp)
	lw	s1, 4(sp)
 cae:	4492                	lw	s1,4(sp)
	RESTORE_DEBUG_MARKER( 8 )
 cb0:	4222                	lw	tp,8(sp)
	addi	sp,sp,16
 cb2:	0141                	addi	sp,sp,16
	ret
 cb4:	8082                	ret
 cb6:	0001                	nop

00000cb8 <insert_stuffed_bit>:

.balign 4
// TODO: This seems to be either 222 or 226 (not 224) in cases.
// It's off by 2 clock cycles.  Probably OK, but, hmm.
insert_stuffed_bit:
	nx6p3delay(3, a3)
 cb8:	4691                	li	a3,4
 cba:	16fd                	addi	a3,a3,-1 # 43fff <rv003usb.c.538ff38c+0x419b1>
 cbc:	fefd                	bnez	a3,cba <insert_stuffed_bit+0x2>
	xor s1, s1, t1
 cbe:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 cc2:	4719                	li	a4,6
	c.nop
 cc4:	0001                	nop
	c.nop
 cc6:	0001                	nop
	sw s1, BSHR_OFFSET(a5)
 cc8:	cb84                	sw	s1,16(a5)
	c.j send_end_bit_complete
 cca:	bf49                	j	c5c <cont_after_jump>

00000ccc <always0>:
 ccc:	00000000          	.word	0x00000000

00000cd0 <string3>:
 cd0:	00300308 00310030 00000000              ..0.0.1.....

00000cdc <string2>:
 cdc:	00690314 0073006e 006d006f 0069006e     ..i.n.s.o.m.n.i.
 cec:	00630061 00000000                       a.c.....

00000cf4 <string1>:
 cf4:	0041030e 00420044 00740065 00000061     ..A.D.B.e.t.a...

00000d04 <string0>:
 d04:	04090304 000a6425                       ....%d..

00000d0c <keyboard_hid_desc>:
 d0c:	06090105 017501a1 07050895 e729e019     ......u.......).
 d1c:	01250015 01950281 03810875 01750595     ..%.....u.....u.
 d2c:	01190805 02910529 03750195 06950391     ....).....u.....
 d3c:	00150875 0705a725 a7290019 00c00081     u...%.....).....

00000d4c <mouse_hid_desc>:
 d4c:	02090105 010901a1 090500a1 03290119     ..............).
 d5c:	01250015 01750395 01950281 03810575     ..%...u.....u...
 d6c:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
 d7c:	c0c00681                                ....

00000d80 <config_descriptor>:
 d80:	003b0209 80000102 00040964 01030100     ..;.....d.......
 d90:	21090002 01000110 07003422 04038105     ...!...."4......
 da0:	00000600                                ....

00000da4 <device_descriptor>:
 da4:	01100112 08000000 c0031209 02010002     ................
 db4:	00000103                                ....

00000db8 <descriptor_list>:
 db8:	00000100 00000da4 00000012 00000200     ................
 dc8:	00000d80 00000022 00002200 00000d4c     ...."...."..L...
 dd8:	00000034 00012200 00000d0c 0000003f     4...."......?...
 de8:	00000300 00000d04 00000004 04090301     ................
 df8:	00000cf4 0000000e 04090302 00000cdc     ................
 e08:	00000014 04090303 00000cd0 00000008     ................
