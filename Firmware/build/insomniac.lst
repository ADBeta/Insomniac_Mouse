
build/insomniac.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:

#if defined( CH32V003 ) || defined( CH32X03x )

void InterruptVectorDefault()
{
	asm volatile( "\n\
   0:	1220006f          	j	122 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000196          	.word	0x00000196
   c:	00000194          	.word	0x00000194
	...
  30:	00000194          	.word	0x00000194
  34:	00000000          	.word	0x00000000
  38:	00000194          	.word	0x00000194
  3c:	00000000          	.word	0x00000000
  40:	00000194          	.word	0x00000194
  44:	00000194          	.word	0x00000194
  48:	00000194          	.word	0x00000194
  4c:	00000194          	.word	0x00000194
  50:	00000590          	.word	0x00000590
  54:	00000194          	.word	0x00000194
  58:	00000194          	.word	0x00000194
  5c:	00000194          	.word	0x00000194
  60:	00000194          	.word	0x00000194
  64:	00000194          	.word	0x00000194
  68:	00000194          	.word	0x00000194
  6c:	00000194          	.word	0x00000194
  70:	00000194          	.word	0x00000194
  74:	00000194          	.word	0x00000194
  78:	00000194          	.word	0x00000194
  7c:	00000194          	.word	0x00000194
  80:	00000194          	.word	0x00000194
  84:	00000194          	.word	0x00000194
  88:	00000194          	.word	0x00000194
  8c:	00000194          	.word	0x00000194
  90:	00000194          	.word	0x00000194
  94:	00000194          	.word	0x00000194
  98:	00000194          	.word	0x00000194
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <int_rand>:
int16_t int_rand(void)
{
	// Generate a number between 0 - 250, then subtract 125 to get it in the
	// correct range (-125 <-> 125)
	int16_t rand_num = 0x7FFF;
    while(rand_num > 250)
  a0:	20000637          	lui	a2,0x20000
  a4:	00062703          	lw	a4,0(a2) # 20000000 <_rand_lfsr>
	uint32_t bit_21 = (_rand_lfsr << 10) & 0x80000000;
	uint32_t bit_01 = (_rand_lfsr << 30) & 0x80000000;
	uint32_t bit_00 = (_rand_lfsr << 31) & 0x80000000;

	// Calculate the MSB to be put into the LFSR
	uint32_t msb = bit_31 ^ bit_21 ^ bit_01 ^ bit_00;
  a8:	800005b7          	lui	a1,0x80000
  ac:	0fa00313          	li	t1,250
{
  b0:	02000693          	li	a3,32
/// a random bit from LFSR taps, 32 times.
/// @param None
/// @return a (psuedo)random 32-bit value
uint32_t _rand_gen_32b(void)
{
	uint32_t rand_out = 0;
  b4:	4501                	li	a0,0
	uint32_t bit_01 = (_rand_lfsr << 30) & 0x80000000;
  b6:	01e71293          	slli	t0,a4,0x1e
	uint32_t bit_21 = (_rand_lfsr << 10) & 0x80000000;
  ba:	00a71793          	slli	a5,a4,0xa
	uint32_t msb = bit_31 ^ bit_21 ^ bit_01 ^ bit_00;
  be:	0057c7b3          	xor	a5,a5,t0
  c2:	8fb9                	xor	a5,a5,a4
	uint32_t bit_00 = (_rand_lfsr << 31) & 0x80000000;
  c4:	01f71293          	slli	t0,a4,0x1f
	uint32_t msb = bit_31 ^ bit_21 ^ bit_01 ^ bit_00;
  c8:	8fed                	and	a5,a5,a1
  ca:	0057c7b3          	xor	a5,a5,t0
	_rand_lfsr = (_rand_lfsr >> 1) | msb;
  ce:	8305                	srli	a4,a4,0x1
	
	uint8_t bits = 32;
	while(bits--)
  d0:	16fd                	addi	a3,a3,-1
	{
		// Shift the current rand value for the new LSB
		rand_out = rand_out << 1;
  d2:	0506                	slli	a0,a0,0x1
	_rand_lfsr = (_rand_lfsr >> 1) | msb;
  d4:	8f5d                	or	a4,a4,a5
	while(bits--)
  d6:	0ff6f693          	zext.b	a3,a3
	return msb >> 31;
  da:	83fd                	srli	a5,a5,0x1f
		// Append the LSB
		rand_out |= _rand_lfsr_update();
  dc:	8d5d                	or	a0,a0,a5
	while(bits--)
  de:	fee1                	bnez	a3,b6 <int_rand+0x16>
		rand_num = rand() & 0x00FF;
  e0:	0ff57513          	zext.b	a0,a0
    while(rand_num > 250)
  e4:	fca346e3          	blt	t1,a0,b0 <int_rand+0x10>
  e8:	00e62023          	sw	a4,0(a2)
    
    return rand_num - 125;
}
  ec:	f8350513          	addi	a0,a0,-125
  f0:	8082                	ret

000000f2 <md_buffer_push>:


md_buffer_status_t md_buffer_push(const mouse_delta_t mdv)
{
	// Calculate the next head position
	size_t next_head = (g_md_buffer_head + 1) % MD_BUFFER_SIZE;
  f2:	8101a783          	lw	a5,-2032(gp) # 20000010 <g_md_buffer_head>
	// If there is no space left in the buffer, reject incomming data
	if(next_head == g_md_buffer_tail) return MD_BUFFER_NO_SPACE;
  f6:	80c1a703          	lw	a4,-2036(gp) # 2000000c <g_md_buffer_tail>
	size_t next_head = (g_md_buffer_head + 1) % MD_BUFFER_SIZE;
  fa:	0785                	addi	a5,a5,1
  fc:	0ff7f793          	zext.b	a5,a5
	if(next_head == g_md_buffer_tail) return MD_BUFFER_NO_SPACE;
 100:	00f70f63          	beq	a4,a5,11e <md_buffer_push+0x2c>

	// Append the data to the current head position
	g_md_buffer[g_md_buffer_head] = mdv;
 104:	8101a603          	lw	a2,-2032(gp) # 20000010 <g_md_buffer_head>
 108:	20000737          	lui	a4,0x20000
 10c:	01870713          	addi	a4,a4,24 # 20000018 <g_md_buffer>
 110:	9732                	add	a4,a4,a2
 112:	00a70023          	sb	a0,0(a4)
	// Update the current head position
	g_md_buffer_head = next_head;
 116:	80f1a823          	sw	a5,-2032(gp) # 20000010 <g_md_buffer_head>

	return MD_BUFFER_OK;
 11a:	4501                	li	a0,0
 11c:	8082                	ret
	if(next_head == g_md_buffer_tail) return MD_BUFFER_NO_SPACE;
 11e:	4505                	li	a0,1
}
 120:	8082                	ret

00000122 <handle_reset>:
	asm volatile( ".option   pop;\n");
}

void handle_reset()
{
	asm volatile( "\n\
 122:	20000197          	auipc	gp,0x20000
 126:	6de18193          	addi	gp,gp,1758 # 20000800 <__global_pointer$>
 12a:	00018113          	mv	sp,gp
 12e:	08000513          	li	a0,128
 132:	30051073          	csrw	mstatus,a0
 136:	468d                	li	a3,3
 138:	00000517          	auipc	a0,0x0
 13c:	ec850513          	addi	a0,a0,-312 # 0 <InterruptVector>
 140:	8d55                	or	a0,a0,a3
 142:	30551073          	csrw	mtvec,a0
	csrw mtvec, a0\n" 
	: : : "a0", "a3", "memory");

	// Careful: Use registers to prevent overwriting of self-data.
	// This clears out BSS.
asm volatile(
 146:	80818513          	addi	a0,gp,-2040 # 20000008 <mouse_delta.0>
 14a:	97418593          	addi	a1,gp,-1676 # 20000174 <_ebss>
 14e:	4601                	li	a2,0
 150:	00b55663          	bge	a0,a1,15c <handle_reset+0x3a>
 154:	c110                	sw	a2,0(a0)
 156:	0511                	addi	a0,a0,4
 158:	feb54ee3          	blt	a0,a1,154 <handle_reset+0x32>
 15c:	00001517          	auipc	a0,0x1
 160:	97850513          	addi	a0,a0,-1672 # ad4 <_data_lma>
 164:	20000597          	auipc	a1,0x20000
 168:	e9c58593          	addi	a1,a1,-356 # 20000000 <_rand_lfsr>
 16c:	80818613          	addi	a2,gp,-2040 # 20000008 <mouse_delta.0>
 170:	00c58863          	beq	a1,a2,180 <handle_reset+0x5e>
 174:	4114                	lw	a3,0(a0)
 176:	c194                	sw	a3,0(a1)
 178:	0511                	addi	a0,a0,4
 17a:	0591                	addi	a1,a1,4
 17c:	fec59ae3          	bne	a1,a2,170 <handle_reset+0x4e>
: : : "a0", "a1", "a2", "a3", "memory"
#endif
);

#if defined( FUNCONF_SYSTICK_USE_HCLK ) && FUNCONF_SYSTICK_USE_HCLK
	SysTick->CTLR = 5;
 180:	e000f7b7          	lui	a5,0xe000f
 184:	4715                	li	a4,5
 186:	c398                	sw	a4,0(a5)
#else
	SysTick->CTLR = 1;
#endif

	// set mepc to be main as the root app.
asm volatile(
 188:	1f800793          	li	a5,504
 18c:	34179073          	csrw	mepc,a5
 190:	30200073          	mret

00000194 <ADC1_IRQHandler>:
	asm volatile( "1: j 1b" );
 194:	a001                	j	194 <ADC1_IRQHandler>

00000196 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
 196:	40021737          	lui	a4,0x40021
 19a:	471c                	lw	a5,8(a4)
 19c:	008006b7          	lui	a3,0x800
 1a0:	8fd5                	or	a5,a5,a3
 1a2:	c71c                	sw	a5,8(a4)

000001a4 <SystemInit>:
	// CH32V003 flash latency
#if defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
 1a4:	400227b7          	lui	a5,0x40022
 1a8:	4705                	li	a4,1
 1aa:	c398                	sw	a4,0(a5)
#if defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
 1ac:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 1b0:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
 1b4:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 1b8:	08170713          	addi	a4,a4,129 # 1080081 <rv003usb.c.ec855e2e+0x107d932>
 1bc:	c398                	sw	a4,0(a5)
	#else
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
 1be:	009f0737          	lui	a4,0x9f0
 1c2:	c798                	sw	a4,8(a5)

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
 1c4:	4398                	lw	a4,0(a5)
 1c6:	00671693          	slli	a3,a4,0x6
 1ca:	fe06dde3          	bgez	a3,1c4 <SystemInit+0x20>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 1ce:	43d8                	lw	a4,4(a5)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 1d0:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 1d4:	9b71                	andi	a4,a4,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
 1d6:	00276713          	ori	a4,a4,2
 1da:	c3d8                	sw	a4,4(a5)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 1dc:	4721                	li	a4,8
 1de:	42dc                	lw	a5,4(a3)
 1e0:	8bb1                	andi	a5,a5,12
 1e2:	fee79ee3          	bne	a5,a4,1de <SystemInit+0x3a>
	*DMDATA1 = 0x0;
 1e6:	e00007b7          	lui	a5,0xe0000
 1ea:	0e07ac23          	sw	zero,248(a5) # e00000f8 <__global_pointer$+0xbffff8f8>
	*DMDATA0 = 0x80;
 1ee:	08000713          	li	a4,128
 1f2:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
 1f6:	8082                	ret

000001f8 <main>:
{
 1f8:	fcc10113          	addi	sp,sp,-52
 1fc:	d806                	sw	ra,48(sp)
 1fe:	d622                	sw	s0,44(sp)
 200:	d426                	sw	s1,40(sp)
	SystemInit();
 202:	374d                	jal	1a4 <SystemInit>
	uint32_t ram_val =   *((volatile uint32_t*)0x20000700) 
 204:	200007b7          	lui	a5,0x20000
 208:	7007a703          	lw	a4,1792(a5) # 20000700 <_ebss+0x58c>
		               ^ *((volatile uint32_t*)0x200007AA);
 20c:	7aa7d683          	lhu	a3,1962(a5)
 210:	7aa78793          	addi	a5,a5,1962
 214:	0027d783          	lhu	a5,2(a5)
 218:	07c2                	slli	a5,a5,0x10
 21a:	8fd5                	or	a5,a5,a3
	uint32_t ram_val =   *((volatile uint32_t*)0x20000700) 
 21c:	8fb9                	xor	a5,a5,a4
	if(ram_val != 0x00000000 && ram_val != 0xFFFFFFFF)
 21e:	fff78693          	addi	a3,a5,-1
 222:	5775                	li	a4,-3
 224:	00d76663          	bltu	a4,a3,230 <main+0x38>
/// @brief seeds the Random LFSR to the value passed
/// @param uint32_t seed
/// @return None
void seed(const uint32_t seed_val)
{
	_rand_lfsr = seed_val;
 228:	20000737          	lui	a4,0x20000
 22c:	00f72023          	sw	a5,0(a4) # 20000000 <_rand_lfsr>
	uint32_t targend = SysTick->CNT + n;
 230:	e000f6b7          	lui	a3,0xe000f
 234:	4698                	lw	a4,8(a3)
 236:	67b1                	lui	a5,0xc
 238:	b8078793          	addi	a5,a5,-1152 # bb80 <rv003usb.c.ec855e2e+0x9431>
 23c:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 23e:	469c                	lw	a5,8(a3)
 240:	8f99                	sub	a5,a5,a4
 242:	fe07cee3          	bltz	a5,23e <main+0x46>
#define LOCAL_CONCAT(A, B) A##B
#define LOCAL_EXP(A, B) LOCAL_CONCAT(A,B)

void usb_setup()
{
	rv003usb_internal_data.se0_windup = 0;
 246:	9201a823          	sw	zero,-1744(gp) # 20000130 <rv003usb_internal_data+0x18>

	// Enable GPIOs, TIMERs
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 24a:	40021737          	lui	a4,0x40021
 24e:	4f1c                	lw	a5,24(a4)
	}
#endif

	// GPIO Setup
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 250:	fff006b7          	lui	a3,0xfff00
 254:	0ff68693          	addi	a3,a3,255 # fff000ff <__global_pointer$+0xdfeff8ff>
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 258:	0217e793          	ori	a5,a5,33
 25c:	cf1c                	sw	a5,24(a4)
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 25e:	400117b7          	lui	a5,0x40011
 262:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
 266:	4398                	lw	a4,0(a5)
 268:	8f75                	and	a4,a4,a3
			) )) )
		 |
#ifdef USB_PIN_DPU
		(GPIO_Speed_50MHz | GPIO_CNF_OUT_PP)<<(4*USB_PIN_DPU) |
#endif
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DP) | 
 26a:	000886b7          	lui	a3,0x88
 26e:	30068693          	addi	a3,a3,768 # 88300 <rv003usb.c.ec855e2e+0x85bb1>
 272:	8f55                	or	a4,a4,a3
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
 274:	c398                	sw	a4,0(a5)
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DM);

	// Configure USB_PIN_DM (D-) as an interrupt on falling edge.
	AFIO->EXTICR = LOCAL_EXP(GPIO_PortSourceGPIO,USB_PORT)<<(USB_PIN_DM*2); // Configure EXTI interrupt for USB_PIN_DM
 276:	0c000693          	li	a3,192
 27a:	40010737          	lui	a4,0x40010
 27e:	c714                	sw	a3,8(a4)
	EXTI->INTENR = 1<<USB_PIN_DM; // Enable EXTI interrupt
 280:	40070713          	addi	a4,a4,1024 # 40010400 <__global_pointer$+0x2000fc00>
 284:	46a1                	li	a3,8
 286:	c314                	sw	a3,0(a4)
	EXTI->FTENR = 1<<USB_PIN_DM;  // Enable falling edge trigger for USB_PIN_DM (D-)
 288:	c754                	sw	a3,12(a4)

#ifdef USB_PIN_DPU
	// This drives USB_PIN_DPU (D- Pull-Up) high, which will tell the host that we are going on-bus.
	LOCAL_EXP(GPIO,USB_PORT)->BSHR = 1<<USB_PIN_DPU;
 28a:	4711                	li	a4,4
 28c:	cb98                	sw	a4,16(a5)
 * @param   IRQn - Interrupt Numbers
 * @return  none
 */
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 28e:	e000e7b7          	lui	a5,0xe000e
 292:	00100737          	lui	a4,0x100
 296:	10e7a023          	sw	a4,256(a5) # e000e100 <__global_pointer$+0xc000d900>
		if(g_buffer_empty_flag)
 29a:	8141c783          	lbu	a5,-2028(gp) # 20000014 <g_buffer_empty_flag>
 29e:	dff5                	beqz	a5,29a <main+0xa2>
			position_t rand_pos = {.x = int_rand(), .y = int_rand()};
 2a0:	3501                	jal	a0 <int_rand>
 2a2:	842a                	mv	s0,a0
 2a4:	3bf5                	jal	a0 <int_rand>
	uint32_t mask = x >> 31; // Extract the sign bit
 2a6:	41f45713          	srai	a4,s0,0x1f
	return (x ^ mask) - mask;
 2aa:	00e446b3          	xor	a3,s0,a4
 2ae:	8e99                	sub	a3,a3,a4
	uint32_t mask = x >> 31; // Extract the sign bit
 2b0:	41f55713          	srai	a4,a0,0x1f
	return (x ^ mask) - mask;
 2b4:	00e54633          	xor	a2,a0,a4
 2b8:	8e19                	sub	a2,a2,a4
	// Bresenham variables
	// Delta x and y - total distances to cover in x and y direction
	int32_t x_delta = int_abs(endpoint.x - startpoint.x);
	int32_t y_delta = int_abs(endpoint.y - startpoint.y);
	// Which direction to step in
	int32_t x_step = (startpoint.x < endpoint.x)  ?  1 : -1;
 2ba:	00142713          	slti	a4,s0,1
	int32_t y_step = (startpoint.y < endpoint.y)  ?  1 : -1;
 2be:	00152493          	slti	s1,a0,1
	int32_t x_step = (startpoint.x < endpoint.x)  ?  1 : -1;
 2c2:	40e00733          	neg	a4,a4
 2c6:	00176713          	ori	a4,a4,1
	int32_t y_step = (startpoint.y < endpoint.y)  ?  1 : -1;
 2ca:	409004b3          	neg	s1,s1
	int32_t x_step = (startpoint.x < endpoint.x)  ?  1 : -1;
 2ce:	c03a                	sw	a4,0(sp)
	int32_t y_step = (startpoint.y < endpoint.y)  ?  1 : -1;
 2d0:	0014e713          	ori	a4,s1,1
 2d4:	c23a                	sw	a4,4(sp)
 2d6:	4702                	lw	a4,0(sp)
			position_t rand_pos = {.x = int_rand(), .y = int_rand()};
 2d8:	87aa                	mv	a5,a0
	// Accumulated Error - how far from the ideal line we are
	int32_t err = x_delta - y_delta;
 2da:	40c685b3          	sub	a1,a3,a2
 2de:	fff70513          	addi	a0,a4,-1 # fffff <rv003usb.c.ec855e2e+0xfd8b0>
 2e2:	4731                	li	a4,12
 2e4:	e111                	bnez	a0,2e8 <main+0xf0>
 2e6:	470d                	li	a4,3
 2e8:	c43a                	sw	a4,8(sp)
 2ea:	4712                	lw	a4,4(sp)
 2ec:	03000513          	li	a0,48
 2f0:	177d                	addi	a4,a4,-1
 2f2:	e319                	bnez	a4,2f8 <main+0x100>
 2f4:	fc000513          	li	a0,-64
 2f8:	0ff57713          	zext.b	a4,a0
 2fc:	c63a                	sw	a4,12(sp)
	position_t startpoint = {0, 0};
 2fe:	4481                	li	s1,0
 300:	4301                	li	t1,0


	// Step through the line until the destination is reached
	while(startpoint.x != endpoint.x || startpoint.y != endpoint.y) 
 302:	00641463          	bne	s0,t1,30a <main+0x112>
 306:	02978d63          	beq	a5,s1,340 <main+0x148>
	{
		// Multiply the error by 2 to avoid fractional calculations
		int32_t err2 = err * 2;
 30a:	00159293          	slli	t0,a1,0x1

		// Step in the X direction - remove vertical error to account for
		// the change in horizontal position
		if(err2 > -y_delta)
 30e:	40c00533          	neg	a0,a2
 312:	02555a63          	bge	a0,t0,346 <main+0x14e>
 316:	ce3e                	sw	a5,28(sp)
		{
			err -= y_delta;
			startpoint.x += x_step;
 318:	4782                	lw	a5,0(sp)

			// Push Left or Right instructions to the Mouse Delta Buffer
			md_return = md_buffer_push( (x_step > 0) ? MOUSE_DELTA_R : MOUSE_DELTA_L);
 31a:	4522                	lw	a0,8(sp)
			err -= y_delta;
 31c:	8d91                	sub	a1,a1,a2
			startpoint.x += x_step;
 31e:	933e                	add	t1,t1,a5
 320:	0342                	slli	t1,t1,0x10
 322:	41035313          	srai	t1,t1,0x10
 326:	d216                	sw	t0,36(sp)
 328:	d036                	sw	a3,32(sp)
			err -= y_delta;
 32a:	cc32                	sw	a2,24(sp)
 32c:	ca2e                	sw	a1,20(sp)
			startpoint.x += x_step;
 32e:	c81a                	sw	t1,16(sp)
			md_return = md_buffer_push( (x_step > 0) ? MOUSE_DELTA_R : MOUSE_DELTA_L);
 330:	33c9                	jal	f2 <md_buffer_push>
			// If the buffer is full, exit early
			if(md_return != MD_BUFFER_OK)  return md_return;
 332:	4342                	lw	t1,16(sp)
 334:	45d2                	lw	a1,20(sp)
 336:	4662                	lw	a2,24(sp)
 338:	47f2                	lw	a5,28(sp)
 33a:	5682                	lw	a3,32(sp)
 33c:	5292                	lw	t0,36(sp)
 33e:	c501                	beqz	a0,346 <main+0x14e>
			g_buffer_empty_flag = 0x00;
 340:	80018a23          	sb	zero,-2028(gp) # 20000014 <g_buffer_empty_flag>
 344:	bf99                	j	29a <main+0xa2>
		}

		// Step in the Y direction - add the horizontal error to account for
		// the change in vertical position
		if(err2 < x_delta) 
 346:	fad2dee3          	bge	t0,a3,302 <main+0x10a>
 34a:	cc3e                	sw	a5,24(sp)
		{
			err += x_delta;
			startpoint.y += y_step;
 34c:	4792                	lw	a5,4(sp)

			// Push Up and Down Instructions to the Mouse Delta Buffer
			md_return = md_buffer_push( (y_step > 0) ? MOUSE_DELTA_U : MOUSE_DELTA_D);
 34e:	4532                	lw	a0,12(sp)
			err += x_delta;
 350:	95b6                	add	a1,a1,a3
			startpoint.y += y_step;
 352:	00f48733          	add	a4,s1,a5
 356:	d01a                	sw	t1,32(sp)
 358:	ce32                	sw	a2,28(sp)
			err += x_delta;
 35a:	ca36                	sw	a3,20(sp)
 35c:	c82e                	sw	a1,16(sp)
			startpoint.y += y_step;
 35e:	01071493          	slli	s1,a4,0x10
			md_return = md_buffer_push( (y_step > 0) ? MOUSE_DELTA_U : MOUSE_DELTA_D);
 362:	3b41                	jal	f2 <md_buffer_push>
			// If the buffer is full, exit early
			if(md_return != MD_BUFFER_OK)  return md_return;
 364:	45c2                	lw	a1,16(sp)
 366:	46d2                	lw	a3,20(sp)
 368:	47e2                	lw	a5,24(sp)
 36a:	4672                	lw	a2,28(sp)
 36c:	5302                	lw	t1,32(sp)
			startpoint.y += y_step;
 36e:	84c1                	srai	s1,s1,0x10
			if(md_return != MD_BUFFER_OK)  return md_return;
 370:	d949                	beqz	a0,302 <main+0x10a>
 372:	b7f9                	j	340 <main+0x148>

00000374 <usb_pid_handle_in>:
	NVIC_EnableIRQ( EXTI7_0_IRQn );
}


void usb_pid_handle_in( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )
{
 374:	1121                	addi	sp,sp,-24
 376:	c822                	sw	s0,16(sp)
 378:	c626                	sw	s1,12(sp)
 37a:	ca06                	sw	ra,20(sp)
	ist->current_endpoint = endp;
	struct usb_endpoint * e = &ist->eps[endp];

	int tosend = 0;
	uint8_t * sendnow;
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 37c:	00561793          	slli	a5,a2,0x5
{
 380:	843a                	mv	s0,a4
	ist->current_endpoint = endp;
 382:	c310                	sw	a2,0(a4)
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 384:	973e                	add	a4,a4,a5
 386:	5308                	lw	a0,32(a4)



#if RV003USB_USE_REBOOT_FEATURE_REPORT
	if( ist->reboot_armed == 2 )
 388:	4454                	lw	a3,12(s0)
 38a:	4709                	li	a4,2
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 38c:	00153513          	seqz	a0,a0
 390:	40a00533          	neg	a0,a0
 394:	07857513          	andi	a0,a0,120
{
 398:	84b2                	mv	s1,a2
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 39a:	04b50513          	addi	a0,a0,75
	if( ist->reboot_armed == 2 )
 39e:	02e69e63          	bne	a3,a4,3da <usb_pid_handle_in+0x66>
 3a2:	c23e                	sw	a5,4(sp)
	{
		usb_send_empty( sendtok );
 3a4:	c02a                	sw	a0,0(sp)
 3a6:	2979                	jal	844 <usb_send_empty>

		// Initiate boot into bootloader
		FLASH->BOOT_MODEKEYR = FLASH_KEY1;
 3a8:	456706b7          	lui	a3,0x45670
 3ac:	40022737          	lui	a4,0x40022
 3b0:	12368693          	addi	a3,a3,291 # 45670123 <__global_pointer$+0x2566f923>
 3b4:	d714                	sw	a3,40(a4)
		FLASH->BOOT_MODEKEYR = FLASH_KEY2;
 3b6:	cdef96b7          	lui	a3,0xcdef9
 3ba:	9ab68693          	addi	a3,a3,-1621 # cdef89ab <__global_pointer$+0xadef81ab>
 3be:	d714                	sw	a3,40(a4)
		FLASH->STATR = 1<<14; // 1<<14 is zero, so, boot bootloader code. Unset for user code.
 3c0:	6691                	lui	a3,0x4
 3c2:	c754                	sw	a3,12(a4)
		FLASH->CTLR = CR_LOCK_Set;
		PFIC->SCTLR = 1<<31;
 3c4:	4792                	lw	a5,4(sp)
		FLASH->CTLR = CR_LOCK_Set;
 3c6:	08000693          	li	a3,128
		PFIC->SCTLR = 1<<31;
 3ca:	4502                	lw	a0,0(sp)
		FLASH->CTLR = CR_LOCK_Set;
 3cc:	cb14                	sw	a3,16(a4)
		PFIC->SCTLR = 1<<31;
 3ce:	e000f737          	lui	a4,0xe000f
 3d2:	800006b7          	lui	a3,0x80000
 3d6:	d0d72823          	sw	a3,-752(a4) # e000ed10 <__global_pointer$+0xc000e510>
	}
#endif

#if RV003USB_HANDLE_IN_REQUEST
	if( e->custom || endp )
 3da:	97a2                	add	a5,a5,s0
 3dc:	579c                	lw	a5,40(a5)
 3de:	8fc5                	or	a5,a5,s1
 3e0:	c7d9                	beqz	a5,46e <usb_pid_handle_in+0xfa>
	if(endp == 1)
 3e2:	4785                	li	a5,1
 3e4:	08f49b63          	bne	s1,a5,47a <usb_pid_handle_in+0x106>
	if(g_md_buffer_head == g_md_buffer_tail) return MD_BUFFER_NO_DATA;
 3e8:	8101a703          	lw	a4,-2032(gp) # 20000010 <g_md_buffer_head>
 3ec:	80c1a783          	lw	a5,-2036(gp) # 2000000c <g_md_buffer_tail>
		uint8_t mouse_data[4] = {0x00, 0x00, 0x00, 0x00};
 3f0:	c402                	sw	zero,8(sp)
	if(g_md_buffer_head == g_md_buffer_tail) return MD_BUFFER_NO_DATA;
 3f2:	00f71e63          	bne	a4,a5,40e <usb_pid_handle_in+0x9a>
			g_buffer_empty_flag = 0x01;
 3f6:	80918a23          	sb	s1,-2028(gp) # 20000014 <g_buffer_empty_flag>
		usb_send_data(mouse_data, 4, 0, sendtok);
 3fa:	86aa                	mv	a3,a0
 3fc:	4601                	li	a2,0
 3fe:	0028                	addi	a0,sp,8
 400:	4591                	li	a1,4
 402:	2981                	jal	852 <usb_send_data>
	}
	else
	{
		usb_send_data( sendnow, tosend, 0, sendtok );
	}
}
 404:	40d2                	lw	ra,20(sp)
 406:	4442                	lw	s0,16(sp)
 408:	44b2                	lw	s1,12(sp)
 40a:	0161                	addi	sp,sp,24
 40c:	8082                	ret
	*mdp = g_md_buffer[g_md_buffer_tail];
 40e:	80c1a703          	lw	a4,-2036(gp) # 2000000c <g_md_buffer_tail>
 412:	200007b7          	lui	a5,0x20000
 416:	01878793          	addi	a5,a5,24 # 20000018 <g_md_buffer>
 41a:	97ba                	add	a5,a5,a4
 41c:	0007c783          	lbu	a5,0(a5)
 420:	80f18423          	sb	a5,-2040(gp) # 20000008 <mouse_delta.0>
	g_md_buffer_tail = (g_md_buffer_tail + 1) % MD_BUFFER_SIZE;
 424:	80c1a703          	lw	a4,-2036(gp) # 2000000c <g_md_buffer_tail>
 428:	0705                	addi	a4,a4,1
 42a:	0ff77713          	zext.b	a4,a4
 42e:	80e1a623          	sw	a4,-2036(gp) # 2000000c <g_md_buffer_tail>
			switch(mouse_delta)
 432:	03000713          	li	a4,48
 436:	02e78963          	beq	a5,a4,468 <usb_pid_handle_in+0xf4>
 43a:	00f76c63          	bltu	a4,a5,452 <usb_pid_handle_in+0xde>
 43e:	470d                	li	a4,3
 440:	02e78163          	beq	a5,a4,462 <usb_pid_handle_in+0xee>
 444:	4731                	li	a4,12
 446:	fae79ae3          	bne	a5,a4,3fa <usb_pid_handle_in+0x86>
					mouse_data[1] = 0xFF;
 44a:	57fd                	li	a5,-1
 44c:	00f104a3          	sb	a5,9(sp)
					break;
 450:	b76d                	j	3fa <usb_pid_handle_in+0x86>
			switch(mouse_delta)
 452:	0c000713          	li	a4,192
 456:	fae792e3          	bne	a5,a4,3fa <usb_pid_handle_in+0x86>
					mouse_data[2] = 0xFF;
 45a:	57fd                	li	a5,-1
 45c:	00f10523          	sb	a5,10(sp)
					break;
 460:	bf69                	j	3fa <usb_pid_handle_in+0x86>
					mouse_data[1] = 0x01;
 462:	009104a3          	sb	s1,9(sp)
					break;
 466:	bf51                	j	3fa <usb_pid_handle_in+0x86>
					mouse_data[2] = 0x01;
 468:	00910523          	sb	s1,10(sp)
					break;
 46c:	b779                	j	3fa <usb_pid_handle_in+0x86>
	int offset = (e->count)<<3;
 46e:	4c5c                	lw	a5,28(s0)
	tosend = (int)e->max_len - offset;
 470:	544c                	lw	a1,44(s0)
	int offset = (e->count)<<3;
 472:	078e                	slli	a5,a5,0x3
	tosend = (int)e->max_len - offset;
 474:	8d9d                	sub	a1,a1,a5
	if( tosend <= 0 )
 476:	00b04763          	bgtz	a1,484 <usb_pid_handle_in+0x110>
}
 47a:	4442                	lw	s0,16(sp)
 47c:	40d2                	lw	ra,20(sp)
 47e:	44b2                	lw	s1,12(sp)
 480:	0161                	addi	sp,sp,24
		usb_send_empty( sendtok );
 482:	a6c9                	j	844 <usb_send_empty>
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
 484:	4721                	li	a4,8
 486:	00b75363          	bge	a4,a1,48c <usb_pid_handle_in+0x118>
 48a:	85ba                	mv	a1,a4
	sendnow = tsend + offset;
 48c:	5c18                	lw	a4,56(s0)
}
 48e:	4442                	lw	s0,16(sp)
 490:	40d2                	lw	ra,20(sp)
 492:	44b2                	lw	s1,12(sp)
		usb_send_data( sendnow, tosend, 0, sendtok );
 494:	86aa                	mv	a3,a0
 496:	4601                	li	a2,0
 498:	00f70533          	add	a0,a4,a5
}
 49c:	0161                	addi	sp,sp,24
		usb_send_data( sendnow, tosend, 0, sendtok );
 49e:	ae55                	j	852 <usb_send_data>

000004a0 <usb_pid_handle_data>:
}

void usb_pid_handle_data( uint32_t this_token, uint8_t * data, uint32_t which_data, uint32_t length, struct rv003usb_internal * ist )
{
	//Received data from host.
	int epno = ist->current_endpoint;
 4a0:	00072303          	lw	t1,0(a4)

	length -= 3;
	uint8_t * data_in = __builtin_assume_aligned( data, 4 );

	// Already received this packet.
	if( e->toggle_out != which_data )
 4a4:	00531793          	slli	a5,t1,0x5
 4a8:	97ba                	add	a5,a5,a4
 4aa:	53c8                	lw	a0,36(a5)
 4ac:	04c51863          	bne	a0,a2,4fc <usb_pid_handle_data+0x5c>
	{
		goto just_ack;
	}

	e->toggle_out = !e->toggle_out;
 4b0:	00153513          	seqz	a0,a0
 4b4:	d3c8                	sw	a0,36(a5)


#if RV003USB_HANDLE_USER_DATA || RV003USB_USE_REBOOT_FEATURE_REPORT
	if( epno || ( !ist->setup_request && length > 3 )  )
 4b6:	00031863          	bnez	t1,4c6 <usb_pid_handle_data+0x26>
 4ba:	471c                	lw	a5,8(a4)
 4bc:	e7b1                	bnez	a5,508 <usb_pid_handle_data+0x68>
	length -= 3;
 4be:	16f5                	addi	a3,a3,-3 # 7ffffffd <__global_pointer$+0x5ffff7fd>
	if( epno || ( !ist->setup_request && length > 3 )  )
 4c0:	478d                	li	a5,3
 4c2:	02d7fd63          	bgeu	a5,a3,4fc <usb_pid_handle_data+0x5c>
	{
#if RV003USB_USE_REBOOT_FEATURE_REPORT
		if( ist->reboot_armed )
 4c6:	475c                	lw	a5,12(a4)
 4c8:	cb95                	beqz	a5,4fc <usb_pid_handle_data+0x5c>
		{
			uint32_t * base = __builtin_assume_aligned( data_in, 4 );
			if( epno == 0 && base[0] == 0xaa3412fd && (base[1] & 0x00ffffff) == 0x00ddccbb )
 4ca:	02031763          	bnez	t1,4f8 <usb_pid_handle_data+0x58>
 4ce:	4194                	lw	a3,0(a1)
 4d0:	aa3417b7          	lui	a5,0xaa341
 4d4:	2fd78793          	addi	a5,a5,765 # aa3412fd <__global_pointer$+0x8a340afd>
 4d8:	02f69063          	bne	a3,a5,4f8 <usb_pid_handle_data+0x58>
 4dc:	41dc                	lw	a5,4(a1)
 4de:	00ddd6b7          	lui	a3,0xddd
 4e2:	cbb68693          	addi	a3,a3,-837 # ddccbb <rv003usb.c.ec855e2e+0xdda56c>
 4e6:	07a2                	slli	a5,a5,0x8
 4e8:	83a1                	srli	a5,a5,0x8
 4ea:	00d79763          	bne	a5,a3,4f8 <usb_pid_handle_data+0x58>
			{
				e->count = 7;
 4ee:	479d                	li	a5,7
 4f0:	cf5c                	sw	a5,28(a4)
				ist->reboot_armed = 2;
 4f2:	4789                	li	a5,2

		if( reqShl == (0x0921>>1) )
		{
			// Class request (Will be writing)  This is hid_send_feature_report
#if RV003USB_USE_REBOOT_FEATURE_REPORT
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 4f4:	c75c                	sw	a5,12(a4)
 4f6:	a019                	j	4fc <usb_pid_handle_data+0x5c>
				ist->reboot_armed = 0;
 4f8:	00072623          	sw	zero,12(a4)
		}
	}
just_ack:
	{
		//Got the right data.  Acknowledge.
		usb_send_data( 0, 0, 2, 0xD2 ); // Send ACK
 4fc:	0d200693          	li	a3,210
 500:	4609                	li	a2,2
 502:	4581                	li	a1,0
 504:	4501                	li	a0,0
 506:	a6b1                	j	852 <usb_send_data>
		uint32_t wvi = s->lValueLSBIndexMSB;
 508:	0045d683          	lhu	a3,4(a1)
 50c:	0025d783          	lhu	a5,2(a1)
		uint32_t wLength = s->wLength;
 510:	0065d503          	lhu	a0,6(a1)
		uint32_t wvi = s->lValueLSBIndexMSB;
 514:	06c2                	slli	a3,a3,0x10
 516:	8edd                	or	a3,a3,a5
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 518:	0005d783          	lhu	a5,0(a1)
		e->count = 0;
 51c:	00072e23          	sw	zero,28(a4)
		e->opaque = 0;
 520:	02072c23          	sw	zero,56(a4)
		e->custom = 0;
 524:	02072423          	sw	zero,40(a4)
		e->max_len = 0;
 528:	02072623          	sw	zero,44(a4)
		ist->setup_request = 0;
 52c:	00072423          	sw	zero,8(a4)
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 530:	8385                	srli	a5,a5,0x1
		if( reqShl == (0x0921>>1) )
 532:	49000613          	li	a2,1168
 536:	00c79863          	bne	a5,a2,546 <usb_pid_handle_data+0xa6>
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 53a:	3fd00793          	li	a5,1021
 53e:	faf69fe3          	bne	a3,a5,4fc <usb_pid_handle_data+0x5c>
 542:	4785                	li	a5,1
 544:	bf45                	j	4f4 <usb_pid_handle_data+0x54>
		if( reqShl == (0x0680>>1) ) // GET_DESCRIPTOR = 6 (msb)
 546:	34000613          	li	a2,832
 54a:	02c79d63          	bne	a5,a2,584 <usb_pid_handle_data+0xe4>
 54e:	6785                	lui	a5,0x1
 550:	a7478793          	addi	a5,a5,-1420 # a74 <descriptor_list>
 554:	06078593          	addi	a1,a5,96
					e->max_len = (swLen < elLen)?swLen:elLen;
 558:	832a                	mv	t1,a0
				if( dl->lIndexValue == wvi )
 55a:	4390                	lw	a2,0(a5)
 55c:	02d61063          	bne	a2,a3,57c <usb_pid_handle_data+0xdc>
					e->opaque = (uint8_t*)dl->addr;
 560:	43d0                	lw	a2,4(a5)
 562:	df10                	sw	a2,56(a4)
					uint16_t elLen = dl->length;
 564:	0087c603          	lbu	a2,8(a5)
					e->max_len = (swLen < elLen)?swLen:elLen;
 568:	01061293          	slli	t0,a2,0x10
 56c:	0102d293          	srli	t0,t0,0x10
 570:	00557363          	bgeu	a0,t0,576 <usb_pid_handle_data+0xd6>
 574:	861a                	mv	a2,t1
 576:	0642                	slli	a2,a2,0x10
 578:	8241                	srli	a2,a2,0x10
 57a:	d750                	sw	a2,44(a4)
			for( i = 0; i < DESCRIPTOR_LIST_ENTRIES; i++ )
 57c:	07b1                	addi	a5,a5,12
 57e:	fcb79ee3          	bne	a5,a1,55a <usb_pid_handle_data+0xba>
 582:	bfad                	j	4fc <usb_pid_handle_data+0x5c>
		else if( reqShl == (0x0500>>1) ) // SET_ADDRESS = 0x05
 584:	28000613          	li	a2,640
 588:	f6c79ae3          	bne	a5,a2,4fc <usb_pid_handle_data+0x5c>
			ist->my_address = wvi;
 58c:	c354                	sw	a3,4(a4)
 58e:	b7bd                	j	4fc <usb_pid_handle_data+0x5c>

00000590 <EXTI7_0_IRQHandler>:

.section .text.vector_handler
.global EXTI7_0_IRQHandler
.balign 4
EXTI7_0_IRQHandler:
	addi	sp,sp,-80
 590:	715d                	addi	sp,sp,-80
	sw	a0, 0(sp)
 592:	c02a                	sw	a0,0(sp)
	sw	a5, 20(sp)
 594:	ca3e                	sw	a5,20(sp)
	la a5, USB_GPIO_BASE
 596:	400117b7          	lui	a5,0x40011
 59a:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
	c.lw a0, INDR_OFFSET(a5) // MUST check SE0 immediately.
 59e:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK
 5a0:	8961                	andi	a0,a0,24

	sw	a1, 4(sp)
 5a2:	c22e                	sw	a1,4(sp)
	sw	a2, 8(sp)
 5a4:	c432                	sw	a2,8(sp)
	sw	a3, 12(sp)
 5a6:	c636                	sw	a3,12(sp)
	sw	a4, 16(sp)
 5a8:	c83a                	sw	a4,16(sp)
	sw	s1, 28(sp)
 5aa:	ce26                	sw	s1,28(sp)

	SAVE_DEBUG_MARKER( 48 );
 5ac:	d812                	sw	tp,48(sp)
	DEBUG_TICK_SETUP
 5ae:	40013237          	lui	tp,0x40013
 5b2:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>
	c.lw a1, INDR_OFFSET(a5)
 5b6:	478c                	lw	a1,8(a5)
	c.andi a1, USB_DMASK;
 5b8:	89e1                	andi	a1,a1,24

	// Finish jump to se0
	c.beqz a0, handle_se0_keepalive
 5ba:	22050763          	beqz	a0,7e8 <handle_se0_keepalive>

	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5be:	4788                	lw	a0,8(a5)
 5c0:	8961                	andi	a0,a0,24
 5c2:	02b51b63          	bne	a0,a1,5f8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5c6:	4788                	lw	a0,8(a5)
 5c8:	8961                	andi	a0,a0,24
 5ca:	02b51763          	bne	a0,a1,5f8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5ce:	4788                	lw	a0,8(a5)
 5d0:	8961                	andi	a0,a0,24
 5d2:	02b51363          	bne	a0,a1,5f8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5d6:	4788                	lw	a0,8(a5)
 5d8:	8961                	andi	a0,a0,24
 5da:	00b51f63          	bne	a0,a1,5f8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5de:	4788                	lw	a0,8(a5)
 5e0:	8961                	andi	a0,a0,24
 5e2:	00b51b63          	bne	a0,a1,5f8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5e6:	4788                	lw	a0,8(a5)
 5e8:	8961                	andi	a0,a0,24
 5ea:	00b51763          	bne	a0,a1,5f8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5ee:	4788                	lw	a0,8(a5)
 5f0:	8961                	andi	a0,a0,24
 5f2:	00b51363          	bne	a0,a1,5f8 <syncout>
	c.j syncout
 5f6:	a009                	j	5f8 <syncout>

000005f8 <syncout>:
syncout:
	sw	s0, 24(sp)
 5f8:	cc22                	sw	s0,24(sp)
	li a2, 0
 5fa:	4601                	li	a2,0
	sw	t0, 32(sp)  // XXX NOTE: This is actually unused register - remove some day?
 5fc:	d016                	sw	t0,32(sp)
	sw	t1, 36(sp)
 5fe:	d21a                	sw	t1,36(sp)

00000600 <preamble_loop>:
	
	// This is actually somewhat late.
	// The preamble loop should try to make it earlier.
.balign 4
preamble_loop:
	DEBUG_TICK_MARK
 600:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 604:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 606:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // SE0 here?
 608:	16050f63          	beqz	a0,786 <done_usb_message>
	c.xor a0, a1;
 60c:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1.
 60e:	8da9                	xor	a1,a1,a0
	j 1f; 1: // 4 cycles?
 610:	a009                	j	612 <preamble_loop+0x12>
	c.beqz a0, done_preamble
 612:	c909                	beqz	a0,624 <done_preamble>
	j 1f; 1: // 4 cycles?
 614:	a009                	j	616 <preamble_loop+0x16>
	c.lw s0, INDR_OFFSET(a5);
 616:	4780                	lw	s0,8(a5)
	c.andi s0, USB_DMASK;
 618:	8861                	andi	s0,s0,24
	c.xor s0, a1
 61a:	8c2d                	xor	s0,s0,a1

	// TRICKY: This helps retime the USB sync.
	// If s0 is nonzero, then it's changed (we're going too slow)
	c.bnez s0, 2f;  // This code takes 6 cycles or 8 cycles, depending.
 61c:	e011                	bnez	s0,620 <preamble_loop+0x20>
	c.j 1f; 1:
 61e:	a009                	j	620 <preamble_loop+0x20>
	2:
	j preamble_loop // 4 cycles
 620:	b7c5                	j	600 <preamble_loop>
 622:	0001                	nop

00000624 <done_preamble>:
.balign 4
done_preamble:
	sw  t2, 40(sp)
 624:	d41e                	sw	t2,40(sp)
	sw  ra, 52(sp)
 626:	da06                	sw	ra,52(sp)
	// 16-byte temporary buffer at 56+sp

	// XXX TODO: Do one byte here to determine the header byte and from that set the CRC.
	c.li s1, 8
 628:	44a1                	li	s1,8

	// This is the first bit that matters.
	c.li s0, 6 // 1 runs.
 62a:	4419                	li	s0,6

	c.nop; 
 62c:	0001                	nop
 62e:	0001                	nop

00000630 <packet_type_loop>:
packet_type_loop:
	// Up here to delay loop a tad, and we need to execute them anyway.
	// TODO: Maybe we could further sync bits here instead of take up time?
	// I.e. can we do what we're doing above, here, and take less time, but sync
	// up when possible.
	li a3, 0xffff // Starting CRC of 0.   Because USB doesn't respect reverse CRCing.
 630:	66c1                	lui	a3,0x10
 632:	16fd                	addi	a3,a3,-1 # ffff <rv003usb.c.ec855e2e+0xd8b0>
	li a4, 0xa001
 634:	6729                	lui	a4,0xa
 636:	0705                	addi	a4,a4,1 # a001 <rv003usb.c.ec855e2e+0x78b2>
	addi  t2, sp, DATA_PTR_OFFSET //rv003usb_internal_data
 638:	03f10393          	addi	t2,sp,63
	la  t0, 0x80
 63c:	08000293          	li	t0,128
	c.nop
 640:	0001                	nop
 642:	0001                	nop

	DEBUG_TICK_MARK
 644:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 648:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 64a:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // Not se0 complete, that can't happen here and be valid.
 64c:	12050d63          	beqz	a0,786 <done_usb_message>
	c.xor a0, a1;
 650:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle
 652:	8da9                	xor	a1,a1,a0

	// No CRC for the header.
	//c.srli a0, USB_PIN_DP
	//c.addi a0, 1 // 00 -> 1, 11 -> 100
	//c.andi a0, 1 // If 1, 1 if 0, 0
        c.nop
 654:	0001                	nop
        seqz a0, a0
 656:	00153513          	seqz	a0,a0

	// Write header into byte in reverse order, because we can.
	c.slli a2, 1
 65a:	0606                	slli	a2,a2,0x1
	c.or a2, a0
 65c:	8e49                	or	a2,a2,a0

	// Handle bit stuffing rules.
	c.addi a0, -1 // 0->0xffffffff 1->0
 65e:	157d                	addi	a0,a0,-1
	c.or s0, a0
 660:	8c49                	or	s0,s0,a0
	c.andi s0, 7
 662:	881d                	andi	s0,s0,7
	c.addi s0, -1
 664:	147d                	addi	s0,s0,-1
	c.addi s1, -1
 666:	14fd                	addi	s1,s1,-1
	c.bnez s1, packet_type_loop
 668:	f4e1                	bnez	s1,630 <packet_type_loop>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	

	// XXX Here, figure out CRC polynomial.

	li s1, (USB_BUFFER_SIZE*8) // # of bits we culd read.
 66a:	06000493          	li	s1,96
	//
	// When we get here, packet type is loaded in A2.
	// If packet type is 0xXX01 or 0xXX11
	// the LSBs are the inverted packet type.
	// we can branch off of bit 2.
	andi a0, a2, 0x0c
 66e:	00c67513          	andi	a0,a2,12

	// if a0 is 1 then it's DATA (full CRC) otherwise,
	// (0) for setup or PARTIAL CRC.
	// Careful:  This has to take a constant amount of time either way the branch goes.
	c.beqz a0, data_crc
 672:	c509                	beqz	a0,67c <data_crc>
	c.li a4, 0x14	
 674:	4751                	li	a4,20
	c.li a3, 0x1e
 676:	46f9                	li	a3,30
 678:	00000013          	.word	0x00000013

0000067c <data_crc>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	
.balign 4
is_end_of_byte:
	HANDLE_EOB_YES
 67c:	00c38023          	sb	a2,0(t2)
 680:	00138393          	.word	0x00138393

00000684 <bit_process>:
	// end-of-byte.
.balign 4
bit_process:
	// Debug blip
//	c.lw a4, INDR_OFFSET(a5);
	DEBUG_TICK_MARK
 684:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 688:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 68a:	8961                	andi	a0,a0,24
	c.xor a0, a1;
 68c:	8d2d                	xor	a0,a0,a1
#define HANDLE_NEXT_BYTE(is_end_of_byte, jumptype)  \
	c.addi s1, -1; \
	andi a0, s1, 7; /* s1 could be really really big */ \
	c.jumptype a0, is_end_of_byte /* 4 cycles for this section. (Checked) (Sometimes 5)? */ 

	c.beqz a0, handle_one_bit
 68e:	c50d                	beqz	a0,6b8 <handle_one_bit>

00000690 <handle_zero_bit>:
handle_zero_bit:
	c.xor a1, a0; // Recover a1, for next cycle
 690:	8da9                	xor	a1,a1,a0
	// TODO: Do we have time to do time fixup here?
	// Can we resync time here?
	// If they are different, we need to sloowwww dowwwnnn
	// There is some free time.  Could do something interesting here!!!
	// I was thinking we could put the resync code here.
	c.j 1f; 1:  //Delay 4 cycles.
 692:	a009                	j	694 <handle_zero_bit+0x4>

	c.li s0, 6      // reset runs-of-one.
 694:	4419                	li	s0,6
	c.beqz a1, se0_complete
 696:	c9bd                	beqz	a1,70c <se0_complete>

	// Handle CRC (0 bit)  (From @Domkeykong)
	slli a0,a3,31 // Put a3s LSB into a0s MSB
 698:	01f69513          	slli	a0,a3,0x1f
	c.srai a0,31    // Copy MSB into all other bits
 69c:	857d                	srai	a0,a0,0x1f
	c.srli a3,1
 69e:	8285                	srli	a3,a3,0x1
	c.and  a0, a4
 6a0:	8d79                	and	a0,a0,a4
	c.xor  a3, a0
 6a2:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 6a4:	8205                	srli	a2,a2,0x1
	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 6a6:	14fd                	addi	s1,s1,-1
 6a8:	0074f513          	andi	a0,s1,7
 6ac:	d961                	beqz	a0,67c <data_crc>
	c.nop
 6ae:	0001                	nop
	c.nop
 6b0:	0001                	nop
	c.nop
 6b2:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 6b4:	f8e1                	bnez	s1,684 <bit_process>
	c.j done_usb_message
 6b6:	a8c1                	j	786 <done_usb_message>

000006b8 <handle_one_bit>:


.balign 4
handle_one_bit:
	c.addi s0, -1; // Count # of runs of 1 (subtract 1)
 6b8:	147d                	addi	s0,s0,-1
	//HANDLE_CRC (1 bit)
	andi a0, a3, 1
 6ba:	0016f513          	andi	a0,a3,1
	c.addi a0, -1
 6be:	157d                	addi	a0,a0,-1
	c.and a0, a4
 6c0:	8d79                	and	a0,a0,a4
	c.srli a3, 1
 6c2:	8285                	srli	a3,a3,0x1
	c.xor a3, a0
 6c4:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 6c6:	8205                	srli	a2,a2,0x1
	ori a2, a2, 0x80
 6c8:	08066613          	ori	a2,a2,128
	c.beqz s0, handle_bit_stuff;
 6cc:	c811                	beqz	s0,6e0 <handle_bit_stuff>

	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 6ce:	14fd                	addi	s1,s1,-1
 6d0:	0074f513          	andi	a0,s1,7
 6d4:	d545                	beqz	a0,67c <data_crc>
	c.nop // Need extra delay here because we need more time if it's end-of-byte.
 6d6:	0001                	nop
	c.nop
 6d8:	0001                	nop
	c.nop
 6da:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 6dc:	f4c5                	bnez	s1,684 <bit_process>
	c.j done_usb_message
 6de:	a065                	j	786 <done_usb_message>

000006e0 <handle_bit_stuff>:

handle_bit_stuff:
	// We want to wait a little bit, then read another byte, and make
	// sure everything is well, before heading back into the main loop
	// Debug blip
	HANDLE_NEXT_BYTE(not_is_end_of_byte_and_bit_stuffed, bnez)
 6e0:	14fd                	addi	s1,s1,-1
 6e2:	0074f513          	andi	a0,s1,7
 6e6:	e509                	bnez	a0,6f0 <not_is_end_of_byte_and_bit_stuffed>
	HANDLE_EOB_YES
 6e8:	00c38023          	sb	a2,0(t2)
 6ec:	00138393          	.word	0x00138393

000006f0 <not_is_end_of_byte_and_bit_stuffed>:

not_is_end_of_byte_and_bit_stuffed:
        DEBUG_TICK_MARK
 6f0:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 6f4:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 6f6:	8961                	andi	a0,a0,24
	c.beqz a0, se0_complete
 6f8:	c911                	beqz	a0,70c <se0_complete>
	c.xor a0, a1;
 6fa:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle.
 6fc:	8da9                	xor	a1,a1,a0

	// If A0 is a 0 then that's bad, we just did a bit stuff
        //   and A0 == 0 means there was no signal transition
	c.beqz a0, done_usb_message
 6fe:	c541                	beqz	a0,786 <done_usb_message>

        // Reset bit stuff, delay, then continue onto the next actual bit
	c.li s0, 6;
 700:	4419                	li	s0,6

        c.nop;
 702:	0001                	nop
	nx6p3delay( 2, a0 )
 704:	450d                	li	a0,3
 706:	157d                	addi	a0,a0,-1
 708:	fd7d                	bnez	a0,706 <not_is_end_of_byte_and_bit_stuffed+0x16>

	c.bnez s1, bit_process // + 4 cycles
 70a:	fcad                	bnez	s1,684 <bit_process>

0000070c <se0_complete>:

.balign 4
se0_complete:
	// This is triggered when we finished getting a packet.
	andi a0, s1, 7; // Make sure we received an even number of bytes.
 70c:	0074f513          	andi	a0,s1,7
	c.bnez a0, done_usb_message
 710:	e93d                	bnez	a0,786 <done_usb_message>


	// Special: handle ACKs?
	// Now we have to decide what we're doing based on the
	// packet type.
	addi  a1, sp, DATA_PTR_OFFSET
 712:	03f10593          	addi	a1,sp,63
 716:	2188                	.short	0x2188
	XW_C_LBU(a0, a1, 0);	//lbu  a0, 0(a1)
	c.addi a1, 1
 718:	0585                	addi	a1,a1,1
	// 1001 => 10010110 => PID IN
	// 0001 => 10000111 => PID_OUT
	// 1101 => 10110100 => SETUP    (OK)

	// a0 contains first 4 bytes.
	la ra, done_usb_message_in // Common return address for all function calls.
 71a:	00000097          	auipc	ra,0x0
 71e:	06c08093          	addi	ra,ra,108 # 786 <done_usb_message>

	// For ACK don't worry about CRC.
	addi a5, a0, -0b01001011
 722:	fb550793          	addi	a5,a0,-75

	RESTORE_DEBUG_MARKER(48) // restore x4 for whatever in C land.
 726:	5242                	lw	tp,48(sp)

	la a4, rv003usb_internal_data
 728:	91818713          	addi	a4,gp,-1768 # 20000118 <rv003usb_internal_data>

	// ACK doesn't need good CRC.
	c.beqz a5, usb_pid_handle_ack
 72c:	c7c9                	beqz	a5,7b6 <usb_pid_handle_ack>

	// Next, check for tokens.
	c.bnez a3, crc_for_tokens_would_be_bad_maybe_data
 72e:	ea85                	bnez	a3,75e <crc_for_tokens_would_be_bad_maybe_data>

00000730 <may_be_a_token>:
 730:	2192                	.short	0x2192
may_be_a_token:
	// Our CRC is 0, so we might be a token.

	// Do token-y things.
	XW_C_LHU( a2, a1, 0 )
	andi a0, a2, 0x7f // addr
 732:	07f67513          	andi	a0,a2,127
	c.srli a2, 7
 736:	821d                	srli	a2,a2,0x7
	c.andi a2, 0xf    // endp
 738:	8a3d                	andi	a2,a2,15
	li s0, ENDPOINTS
 73a:	4409                	li	s0,2
	bgeu a2, s0, done_usb_message // Make sure < ENDPOINTS
 73c:	04867563          	bgeu	a2,s0,786 <done_usb_message>
	c.beqz a0,  yes_check_tokens
 740:	c501                	beqz	a0,748 <yes_check_tokens>
 742:	2340                	.short	0x2340
	// Otherwise, we might have our assigned address.
	XW_C_LBU(s0, a4, MY_ADDRESS_OFFSET_BYTES);	//	lbu s0, MY_ADDRESS_OFFSET_BYTES(a4)
	bne s0, a0, done_usb_message // addr != 0 && addr != ours.
 744:	04a41163          	bne	s0,a0,786 <done_usb_message>

00000748 <yes_check_tokens>:
yes_check_tokens:
	addi a5, a5, (0b01001011-0b10000111)
 748:	fc478793          	addi	a5,a5,-60
	c.beqz a5, usb_pid_handle_out
 74c:	cfc1                	beqz	a5,7e4 <usb_pid_handle_out>
	c.addi a5, (0b10000111-0b10010110)
 74e:	17c5                	addi	a5,a5,-15
	c.beqz a5, usb_pid_handle_in
 750:	00079463          	bnez	a5,758 <yes_check_tokens+0x10>
 754:	c21ff06f          	j	374 <usb_pid_handle_in>
	c.addi a5, (0b10010110-0b10110100)
 758:	1789                	addi	a5,a5,-30
	c.beqz a5, usb_pid_handle_setup
 75a:	cbb5                	beqz	a5,7ce <usb_pid_handle_setup>

	c.j done_usb_message_in
 75c:	a02d                	j	786 <done_usb_message>

0000075e <crc_for_tokens_would_be_bad_maybe_data>:

	// CRC is nonzero. (Good for Data packets)
crc_for_tokens_would_be_bad_maybe_data:
	li s0, 0xb001  // UGH: You can't use the CRC16 in reverse :(
 75e:	642d                	lui	s0,0xb
 760:	0405                	addi	s0,s0,1 # b001 <rv003usb.c.ec855e2e+0x88b2>
	c.sub a3, s0
 762:	8e81                	sub	a3,a3,s0
	c.bnez a3, done_usb_message_in
 764:	e28d                	bnez	a3,786 <done_usb_message>
	// Good CRC!!
	sub a3, t2, a1 //a3 = # of bytes read..
 766:	40b386b3          	sub	a3,t2,a1
	c.addi a3, 1
 76a:	0685                	addi	a3,a3,1
	addi a5, a5, (0b01001011-0b11000011)
 76c:	f8878793          	addi	a5,a5,-120
	c.li a2, 0
 770:	4601                	li	a2,0
	c.beqz a5, usb_pid_handle_data
 772:	00079463          	bnez	a5,77a <crc_for_tokens_would_be_bad_maybe_data+0x1c>
 776:	d2bff06f          	j	4a0 <usb_pid_handle_data>
	c.addi a5, (0b11000011-0b11010010)
 77a:	17c5                	addi	a5,a5,-15
	c.li a2, 1
 77c:	4605                	li	a2,1
	c.beqz a5, usb_pid_handle_data
 77e:	00079463          	bnez	a5,786 <done_usb_message>
 782:	d1fff06f          	j	4a0 <usb_pid_handle_data>

00000786 <done_usb_message>:

done_usb_message:
done_usb_message_in:
	lw	s0, 24(sp)
 786:	4462                	lw	s0,24(sp)
	lw	s1, 28(sp)
 788:	44f2                	lw	s1,28(sp)
	lw	t0, 32(sp)
 78a:	5282                	lw	t0,32(sp)
	lw	t1, 36(sp)
 78c:	5312                	lw	t1,36(sp)
	lw	t2, 40(sp)
 78e:	53a2                	lw	t2,40(sp)
	lw  ra, 52(sp)
 790:	50d2                	lw	ra,52(sp)

00000792 <ret_from_se0>:

ret_from_se0:
	lw	s1, 28(sp)
 792:	44f2                	lw	s1,28(sp)
	RESTORE_DEBUG_MARKER(48)
 794:	5242                	lw	tp,48(sp)
	lw	a2, 8(sp)
 796:	4622                	lw	a2,8(sp)
	lw	a3, 12(sp)
 798:	46b2                	lw	a3,12(sp)
	lw	a4, 16(sp)
 79a:	4742                	lw	a4,16(sp)
	lw	a1, 4(sp)
 79c:	4592                	lw	a1,4(sp)

0000079e <interrupt_complete>:

interrupt_complete:
	// Acknowledge interrupt.
	// EXTI->INTFR = 1<<4
	c.j 1f; 1: // Extra little bit of delay to make sure we don't accidentally false fire.
 79e:	a009                	j	7a0 <interrupt_complete+0x2>

	la a5, EXTI_BASE + 20
 7a0:	400107b7          	lui	a5,0x40010
 7a4:	41478793          	addi	a5,a5,1044 # 40010414 <__global_pointer$+0x2000fc14>
	li a0, (1<<USB_PIN_DM)
 7a8:	4521                	li	a0,8
	sw a0, 0(a5)
 7aa:	c388                	sw	a0,0(a5)

	// Restore stack.
	lw	a0, 0(sp)
 7ac:	4502                	lw	a0,0(sp)
	lw	a5, 20(sp)
 7ae:	47d2                	lw	a5,20(sp)
	addi	sp,sp,80
 7b0:	6161                	addi	sp,sp,80
	mret
 7b2:	30200073          	mret

000007b6 <usb_pid_handle_ack>:
	return;
}
*/

usb_pid_handle_ack:
	c.lw a2, 0(a4) //ist->current_endpoint -> endp;
 7b6:	4310                	lw	a2,0(a4)
	c.slli a2, 5
 7b8:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 7ba:	963a                	add	a2,a2,a4
	c.addi a2, ENDP_OFFSET // usb_endpoint eps[ENDPOINTS];
 7bc:	0671                	addi	a2,a2,28

	c.lw a0, (EP_TOGGLE_IN_OFFSET)(a2) // toggle_in=!toggle_in
 7be:	4248                	lw	a0,4(a2)
	c.li a1, 1
 7c0:	4585                	li	a1,1
	c.xor a0, a1
 7c2:	8d2d                	xor	a0,a0,a1
	c.sw a0, (EP_TOGGLE_IN_OFFSET)(a2)
 7c4:	c248                	sw	a0,4(a2)

	c.lw a0, (EP_COUNT_OFFSET)(a2) // count_in
 7c6:	4208                	lw	a0,0(a2)
	c.addi a0, 1
 7c8:	0505                	addi	a0,a0,1
	c.sw a0, (EP_COUNT_OFFSET)(a2)
 7ca:	c208                	sw	a0,0(a2)

	c.j done_usb_message_in
 7cc:	bf6d                	j	786 <done_usb_message>

000007ce <usb_pid_handle_setup>:
	e->count = 0;
	e->toggle_in = 1;
	ist->setup_request = 1;
}*/
usb_pid_handle_setup:
	c.sw a2, 0(a4) // ist->current_endpoint = endp
 7ce:	c310                	sw	a2,0(a4)
	c.li a1, 1
 7d0:	4585                	li	a1,1
	c.sw a1, SETUP_REQUEST_OFFSET(a4) //ist->setup_request = 1;
 7d2:	c70c                	sw	a1,8(a4)
	c.slli a2, 3+2
 7d4:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 7d6:	963a                	add	a2,a2,a4
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_IN_OFFSET)(a2) //e->toggle_in = 1;
 7d8:	d20c                	sw	a1,32(a2)
	c.li a1, 0
 7da:	4581                	li	a1,0
	c.sw a1, (ENDP_OFFSET+EP_COUNT_OFFSET)(a2)  //e->count = 0;
 7dc:	ce4c                	sw	a1,28(a2)
	c.sw a1, (ENDP_OFFSET+EP_OPAQUE_OFFSET)(a2)  //e->opaque = 0;
 7de:	de0c                	sw	a1,56(a2)
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_OUT_OFFSET)(a2) //e->toggle_out = 0;
 7e0:	d24c                	sw	a1,36(a2)
	c.j done_usb_message_in	
 7e2:	b755                	j	786 <done_usb_message>

000007e4 <usb_pid_handle_out>:
 7e4:	a310                	.short	0xa310
//This will correctly swap back the endpoint.
usb_pid_handle_out:
	//void usb_pid_handle_out( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )	
	//sb a2, 0(a4) //ist->current_endpoint = endp;
	XW_C_SB( a2, a4, 0 ); // current_endpoint = endp
	c.j done_usb_message_in
 7e6:	b745                	j	786 <done_usb_message>

000007e8 <handle_se0_keepalive>:

handle_se0_keepalive:
	// In here, we want to do smart stuff with the
	// 1ms tick.

	la  a0, SYSTICK_CNT
 7e8:	e000f537          	lui	a0,0xe000f
 7ec:	0521                	addi	a0,a0,8 # e000f008 <__global_pointer$+0xc000e808>
	la a4, rv003usb_internal_data
 7ee:	91818713          	addi	a4,gp,-1768 # 20000118 <rv003usb_internal_data>
	c.lw a1, LAST_SE0_OFFSET(a4) //last cycle count   last_se0_cyccount
 7f2:	4b0c                	lw	a1,16(a4)
	c.lw a2, 0(a0) //this cycle count
 7f4:	4110                	lw	a2,0(a0)
	c.sw a2, LAST_SE0_OFFSET(a4) //store it back to last_se0_cyccount
 7f6:	cb10                	sw	a2,16(a4)
	c.sub a2, a1
 7f8:	8e0d                	sub	a2,a2,a1
	c.sw a2, DELTA_SE0_OFFSET(a4) //record delta_se0_cyccount
 7fa:	cb50                	sw	a2,20(a4)

	li a1, 48000
 7fc:	65b1                	lui	a1,0xc
 7fe:	b8058593          	addi	a1,a1,-1152 # bb80 <rv003usb.c.ec855e2e+0x9431>
	c.sub a2, a1
 802:	8e0d                	sub	a2,a2,a1
	// This is our deviance from 48MHz.

	// Make sure we aren't in left field.
	li a5, 4000
 804:	6785                	lui	a5,0x1
 806:	fa078793          	addi	a5,a5,-96 # fa0 <_data_lma+0x4cc>
	bge a2, a5, ret_from_se0
 80a:	f8f654e3          	bge	a2,a5,792 <ret_from_se0>
	li a5, -4000
 80e:	77fd                	lui	a5,0xfffff
 810:	06078793          	addi	a5,a5,96 # fffff060 <__global_pointer$+0xdfffe860>
	blt a2, a5, ret_from_se0
 814:	f6f64fe3          	blt	a2,a5,792 <ret_from_se0>

	c.lw a1, SE0_WINDUP_OFFSET(a4) // load windup se0_windup
 818:	4f0c                	lw	a1,24(a4)
	c.add a1, a2
 81a:	95b2                	add	a1,a1,a2
	c.sw a1, SE0_WINDUP_OFFSET(a4) // save windup
 81c:	cf0c                	sw	a1,24(a4)

	// No further adjustments
	beqz a1, ret_from_se0
 81e:	d9b5                	beqz	a1,792 <ret_from_se0>

	// 0x40021000 = RCC.CTLR
	la a4, 0x40021000
 820:	40021737          	lui	a4,0x40021
	lw a0, 0(a4)
 824:	4308                	lw	a0,0(a4)
	srli a2, a0, 3 // Extract HSI Trim.
 826:	00355613          	srli	a2,a0,0x3
	andi a2, a2, 0b11111
 82a:	8a7d                	andi	a2,a2,31
	li a5, 0xffffff07  
 82c:	f0700793          	li	a5,-249
	and a0, a0, a5	// Mask off non-HSI
 830:	8d7d                	and	a0,a0,a5

	// Decimate windup - use as HSIrim.
	neg a1, a1
 832:	40b005b3          	neg	a1,a1
	srai a2, a1, 9
 836:	4095d613          	srai	a2,a1,0x9
	addi a2, a2, 16  // add HSI offset.
 83a:	0641                	addi	a2,a2,16

	// Put trim in place in register.
	slli a2, a2, 3
 83c:	060e                	slli	a2,a2,0x3
	or a0, a0, a2
 83e:	8d51                	or	a0,a0,a2
	sw a0, 0(a4)
 840:	c308                	sw	a0,0(a4)

	j ret_from_se0
 842:	bf81                	j	792 <ret_from_se0>

00000844 <usb_send_empty>:


.balign 4
//void usb_send_empty( uint32_t token );
usb_send_empty:
	c.mv a3, a0
 844:	86aa                	mv	a3,a0
	la a0, always0
 846:	00000517          	auipc	a0,0x0
 84a:	13a50513          	addi	a0,a0,314 # 980 <always0>
	li a1, 2
 84e:	4589                	li	a1,2
	c.mv a2, a1
 850:	862e                	mv	a2,a1

00000852 <usb_send_data>:
//void usb_send_data( uint8_t * data, uint32_t length, uint32_t poly_function, uint32_t token );
usb_send_data:
	addi	sp,sp,-16
 852:	1141                	addi	sp,sp,-16
	sw	s0, 0(sp)
 854:	c022                	sw	s0,0(sp)
	sw	s1, 4(sp)
 856:	c226                	sw	s1,4(sp)

	la a5, USB_GPIO_BASE
 858:	400117b7          	lui	a5,0x40011
 85c:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>

	// ASAP: Turn the bus around and send our preamble + token.
	c.lw a4, CFGLR_OFFSET(a5)
 860:	4398                	lw	a4,0(a5)

	li s1, ~((0b1111<<(USB_PIN_DP*4)) | (0b1111<<(USB_PIN_DM*4)))
 862:	fff014b7          	lui	s1,0xfff01
 866:	14fd                	addi	s1,s1,-1 # fff00fff <__global_pointer$+0xdff007ff>
	and a4, s1, a4
 868:	8f65                	and	a4,a4,s1

	// Convert D+/D- into 2MHz outputs
	li s1, ((0b0010<<(USB_PIN_DP*4)) | (0b0010<<(USB_PIN_DM*4)))
 86a:	000224b7          	lui	s1,0x22
	or a4, s1, a4
 86e:	8f45                	or	a4,a4,s1

	li s1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16))
 870:	000804b7          	lui	s1,0x80
 874:	04c1                	addi	s1,s1,16 # 80010 <rv003usb.c.ec855e2e+0x7d8c1>
	c.sw s1, BSHR_OFFSET(a5)
 876:	cb84                	sw	s1,16(a5)

	//00: Universal push-pull output mode
	c.sw a4, CFGLR_OFFSET(a5)
 878:	c398                	sw	a4,0(a5)

	li t1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16)) | (1<<USB_PIN_DM) | (1<<(USB_PIN_DP+16));
 87a:	00180337          	lui	t1,0x180
 87e:	0361                	addi	t1,t1,24 # 180018 <rv003usb.c.ec855e2e+0x17d8c9>

	SAVE_DEBUG_MARKER( 8 )
 880:	c412                	sw	tp,8(sp)

	// Save off our preamble and token.
	c.slli a3, 7     //Put token further up so it gets sent later.
 882:	069e                	slli	a3,a3,0x7
	ori s0, a3, 0x40  
 884:	0406e413          	ori	s0,a3,64

	li t0, 0x0000
 888:	4281                	li	t0,0
	c.bnez a2, done_poly_check
 88a:	e609                	bnez	a2,894 <done_poly_check>
	li t0, 0xa001
 88c:	62a9                	lui	t0,0xa
 88e:	0285                	addi	t0,t0,1 # a001 <rv003usb.c.ec855e2e+0x78b2>
	li a2, 0xffff
 890:	6641                	lui	a2,0x10
 892:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.ec855e2e+0xd8b0>

00000894 <done_poly_check>:
done_poly_check:

	c.slli a1, 3 // bump up one extra to be # of bits
 894:	058e                	slli	a1,a1,0x3
	mv t2, a1
 896:	83ae                	mv	t2,a1

	// t0 is our polynomial
	// a2 is our running CRC.
	// a3 is our token.
	DEBUG_TICK_SETUP
 898:	40013237          	lui	tp,0x40013
 89c:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>

	c.li a4, 6 // reset bit stuffing.
 8a0:	4719                	li	a4,6
	c.li a1, 15 // 15 bits.
 8a2:	45bd                	li	a1,15

	//c.nop; c.nop; c.nop;
	c.j pre_and_tok_send_inner_loop
 8a4:	a011                	j	8a8 <pre_and_tok_send_inner_loop>
 8a6:	0001                	nop

000008a8 <pre_and_tok_send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 8a8:	86a2                	mv	a3,s0
	c.srli s0, 1 // Shift down into the next bit.
 8aa:	8005                	srli	s0,s0,0x1
	c.andi a3, 1
 8ac:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.

	c.addi a4, -1
 8ae:	177d                	addi	a4,a4,-1 # 40020fff <__global_pointer$+0x200207ff>
	c.bnez a3, pre_and_tok_send_one_bit
 8b0:	e681                	bnez	a3,8b8 <pre_and_tok_send_one_bit>
//Send 0 bit. (Flip)
	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 8b2:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 8b6:	4719                	li	a4,6

000008b8 <pre_and_tok_send_one_bit>:
	// DO NOT flip.  Allow a4 to increment.
// Deliberately unaligned for timing purposes.
.balign 4
pre_and_tok_send_one_bit:
	sw s1, BSHR_OFFSET(a5)
 8b8:	cb84                	sw	s1,16(a5)
	//Bit stuffing doesn't happen.
	c.addi a1, -1
 8ba:	15fd                	addi	a1,a1,-1
	c.beqz a1, pre_and_tok_done_sending_data
 8bc:	c591                	beqz	a1,8c8 <pre_and_tok_done_sending_data>
	nx6p3delay( 2, a3 );	c.nop;             // Free time!
 8be:	468d                	li	a3,3
 8c0:	16fd                	addi	a3,a3,-1
 8c2:	fefd                	bnez	a3,8c0 <pre_and_tok_send_one_bit+0x8>
 8c4:	0001                	nop
	c.j pre_and_tok_send_inner_loop
 8c6:	b7cd                	j	8a8 <pre_and_tok_send_inner_loop>

000008c8 <pre_and_tok_done_sending_data>:
////////////////////////////////////////////////////////////////////////////

	// We have very little time here.  Just enough to do this.

	//Restore size.
	mv a1, t2//lw  a1, 12(sp)
 8c8:	859e                	mv	a1,t2
	c.beqz a1, no_really_done_sending_data  //No actual payload?  Bail!
 8ca:	c5ad                	beqz	a1,934 <no_really_done_sending_data>
	c.addi a1, -1
 8cc:	15fd                	addi	a1,a1,-1
//	beqz t2, no_really_done_sending_data 

	bnez t0, done_poly_check2
 8ce:	00029463          	bnez	t0,8d6 <done_poly_check2>
	li a2, 0xffff
 8d2:	6641                	lui	a2,0x10
 8d4:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.ec855e2e+0xd8b0>

000008d6 <done_poly_check2>:
 8d6:	0001                	nop

000008d8 <load_next_byte>:
 8d8:	2100                	.short	0x2100
	// CH32v003 has the XW extension.
	// this replaces: lb s0, 0(a0)
	XW_C_LBU(s0, a0, 0);
	//lb s0, 0(a0)
	//	.long 0x00150513 // addi a0, a0, 1  (For alignment's sake)
	c.addi a0, 1
 8da:	0505                	addi	a0,a0,1

000008dc <send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 8dc:	86a2                	mv	a3,s0
	c.andi a3, 1
 8de:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.
	c.beqz a3, send_zero_bit
 8e0:	ce81                	beqz	a3,8f8 <send_zero_bit>
	c.srli s0, 1 // Shift down into the next bit.
 8e2:	8005                	srli	s0,s0,0x1
//send_one_bit:
	//HANDLE_CRC (1 bit)
	andi a3, a2, 1
 8e4:	00167693          	andi	a3,a2,1
	c.addi a3, -1
 8e8:	16fd                	addi	a3,a3,-1
	and a3, a3, t0
 8ea:	0056f6b3          	and	a3,a3,t0
	c.srli a2, 1
 8ee:	8205                	srli	a2,a2,0x1
	c.xor a2, a3
 8f0:	8e35                	xor	a2,a2,a3

	c.addi a4, -1
 8f2:	177d                	addi	a4,a4,-1
	c.beqz a4, insert_stuffed_bit
 8f4:	cf25                	beqz	a4,96c <insert_stuffed_bit>
	c.j cont_after_jump
 8f6:	a829                	j	910 <cont_after_jump>

000008f8 <send_zero_bit>:
//Send 0 bit. (Flip)
.balign 4
send_zero_bit:
	c.srli s0, 1 // Shift down into the next bit.
 8f8:	8005                	srli	s0,s0,0x1
	// a3 is temp
	// t0 is polynomial.

	// XXX WARNING: this was by https://github.com/cnlohr/rv003usb/issues/7 
	// TODO Check me!
	slli a3,a2,31 // Put a3s LSB into a0s MSB
 8fa:	01f61693          	slli	a3,a2,0x1f
	c.srai a3,31    // Copy MSB into all other bits
 8fe:	86fd                	srai	a3,a3,0x1f

	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 900:	0064c4b3          	xor	s1,s1,t1
	sw s1, BSHR_OFFSET(a5)
 904:	cb84                	sw	s1,16(a5)

	c.li a4, 6 // reset bit stuffing.
 906:	4719                	li	a4,6

	// XXX XXX CRC down here to make bit stuffing timings line up.
	c.srli a2,1
 908:	8205                	srli	a2,a2,0x1
	and a3,a3,t0
 90a:	0056f6b3          	and	a3,a3,t0
	c.xor  a2,a3 
 90e:	8e35                	xor	a2,a2,a3

00000910 <cont_after_jump>:

.balign 4
cont_after_jump:
send_end_bit_complete:
	c.beqz a1, done_sending_data
 910:	c981                	beqz	a1,920 <done_sending_data>
	andi a3, a1, 7
 912:	0075f693          	andi	a3,a1,7
	c.addi a1, -1
 916:	15fd                	addi	a1,a1,-1
	c.beqz a3, load_next_byte
 918:	d2e1                	beqz	a3,8d8 <load_next_byte>
	// Wait an extra few cycles.
	c.j 1f; 1:
 91a:	a009                	j	91c <cont_after_jump+0xc>
	c.j send_inner_loop
 91c:	b7c1                	j	8dc <send_inner_loop>
 91e:	0001                	nop

00000920 <done_sending_data>:

.balign 4
done_sending_data:
	// BUT WAIT!! MAYBE WE NEED TO CRC!
	beqz t0, no_really_done_sending_data
 920:	00028a63          	beqz	t0,934 <no_really_done_sending_data>
	srli t0, t0, 8 // reset poly - we don't want it anymore.
 924:	0082d293          	srli	t0,t0,0x8
	li a1, 7 // Load 8 more bits out
 928:	459d                	li	a1,7
	beqz t0, send_inner_loop  //Second CRC byte
 92a:	fa0289e3          	beqz	t0,8dc <send_inner_loop>
	// First CRC byte
	not s0, a2 // get read to send out the CRC.
 92e:	fff64413          	not	s0,a2
	c.j send_inner_loop
 932:	b76d                	j	8dc <send_inner_loop>

00000934 <no_really_done_sending_data>:
.balign 4
no_really_done_sending_data:

//	c.bnez a2, poly_function  TODO: Uncomment me!

	nx6p3delay( 2, a3 );
 934:	468d                	li	a3,3
 936:	16fd                	addi	a3,a3,-1
 938:	fefd                	bnez	a3,936 <no_really_done_sending_data+0x2>

	// Need to perform an SE0.
	li s1, (1<<(USB_PIN_DM+16)) | (1<<(USB_PIN_DP+16))
 93a:	001804b7          	lui	s1,0x180
	c.sw s1, BSHR_OFFSET(a5)
 93e:	cb84                	sw	s1,16(a5)

	nx6p3delay( 7, a3 );
 940:	46a1                	li	a3,8
 942:	16fd                	addi	a3,a3,-1
 944:	fefd                	bnez	a3,942 <no_really_done_sending_data+0xe>

	li s1, (1<<(USB_PIN_DM)) | (1<<(USB_PIN_DP+16))
 946:	001004b7          	lui	s1,0x100
 94a:	04a1                	addi	s1,s1,8 # 100008 <rv003usb.c.ec855e2e+0xfd8b9>
	c.sw s1, BSHR_OFFSET(a5)
 94c:	cb84                	sw	s1,16(a5)

	lw s1, CFGLR_OFFSET(a5)
 94e:	4384                	lw	s1,0(a5)
	// Convert D+/D- into inputs.
	li a3, ~((0b11<<(USB_PIN_DP*4)) | (0b11<<(USB_PIN_DM*4)))
 950:	fffcd6b7          	lui	a3,0xfffcd
 954:	16fd                	addi	a3,a3,-1 # fffccfff <__global_pointer$+0xdffcc7ff>
	and s1, a3, s1
 956:	8cf5                	and	s1,s1,a3
	// 01: Floating input mode.
	li a3, ((0b01<<(USB_PIN_DP*4+2)) | (0b01<<(USB_PIN_DM*4+2)))
 958:	000446b7          	lui	a3,0x44
	or s1, a3, s1
 95c:	8cd5                	or	s1,s1,a3
	sw s1, CFGLR_OFFSET(a5)
 95e:	c384                	sw	s1,0(a5)

	lw	s0, 0(sp)
 960:	4402                	lw	s0,0(sp)
	lw	s1, 4(sp)
 962:	4492                	lw	s1,4(sp)
	RESTORE_DEBUG_MARKER( 8 )
 964:	4222                	lw	tp,8(sp)
	addi	sp,sp,16
 966:	0141                	addi	sp,sp,16
	ret
 968:	8082                	ret
 96a:	0001                	nop

0000096c <insert_stuffed_bit>:

.balign 4
// TODO: This seems to be either 222 or 226 (not 224) in cases.
// It's off by 2 clock cycles.  Probably OK, but, hmm.
insert_stuffed_bit:
	nx6p3delay(3, a3)
 96c:	4691                	li	a3,4
 96e:	16fd                	addi	a3,a3,-1 # 43fff <rv003usb.c.ec855e2e+0x418b0>
 970:	fefd                	bnez	a3,96e <insert_stuffed_bit+0x2>
	xor s1, s1, t1
 972:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 976:	4719                	li	a4,6
	c.nop
 978:	0001                	nop
	c.nop
 97a:	0001                	nop
	sw s1, BSHR_OFFSET(a5)
 97c:	cb84                	sw	s1,16(a5)
	c.j send_end_bit_complete
 97e:	bf49                	j	910 <cont_after_jump>

00000980 <always0>:
 980:	00000000          	.word	0x00000000

00000984 <string3>:
 984:	00300308 00310030 00000000              ..0.0.1.....

00000990 <string2>:
 990:	00490320 0073006e 006d006f 0069006e      .I.n.s.o.m.n.i.
 9a0:	00630061 004d0020 0075006f 00650073     a.c. .M.o.u.s.e.
 9b0:	00000000                                ....

000009b4 <string1>:
 9b4:	0041030e 00420044 00740065 00000061     ..A.D.B.e.t.a...

000009c4 <string0>:
 9c4:	04090304                                ....

000009c8 <keyboard_hid_desc>:
 9c8:	06090105 017501a1 07050895 e729e019     ......u.......).
 9d8:	01250015 01950281 03810875 01750595     ..%.....u.....u.
 9e8:	01190805 02910529 03750195 06950391     ....).....u.....
 9f8:	00150875 0705a725 a7290019 00c00081     u...%.....).....

00000a08 <mouse_hid_desc>:
 a08:	02090105 010901a1 090500a1 03290119     ..............).
 a18:	01250015 01750395 01950281 03810575     ..%...u.....u...
 a28:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
 a38:	c0c00681                                ....

00000a3c <config_descriptor>:
 a3c:	003b0209 80000102 00040964 01030100     ..;.....d.......
 a4c:	21090002 01000110 07003422 04038105     ...!...."4......
 a5c:	00000a00                                ....

00000a60 <device_descriptor>:
 a60:	01100112 08000000 c0031209 02010002     ................
 a70:	00000103                                ....

00000a74 <descriptor_list>:
 a74:	00000100 00000a60 00000012 00000200     ....`...........
 a84:	00000a3c 00000022 00002200 00000a08     <..."...."......
 a94:	00000034 00012200 000009c8 0000003f     4...."......?...
 aa4:	00000300 000009c4 00000004 04090301     ................
 ab4:	000009b4 0000000e 04090302 00000990     ................
 ac4:	00000020 04090303 00000984 00000008      ...............
